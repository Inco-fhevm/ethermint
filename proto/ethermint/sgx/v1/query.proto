syntax = "proto3";

package ethermint.sgx.v1;

import "tendermint/types/types.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/evmos/ethermint/x/sgx/types";

// QueryService defines the gRPC querier service.
service QueryService {
  // func (s *SgxRpcServer) PrepareTx(args *keeper.PrepareTxArgs, reply *keeper.PrepareTxReply) error {
  rpc PrepareTx(PrepareTxRequest) returns (PrepareTxResponse) {
  }

  // func (s *SgxRpcServer) Create(args *keeper.CreateArgs, reply *keeper.CreateReply) error {
  rpc Create(CreateRequest) returns (CreateResponse) {
  }

  // func (s *SgxRpcServer) Call(args *keeper.CallArgs, reply *keeper.CallReply) error {
  rpc Call(CallRequest) returns (CallResponse) {
  }
  
  // func (s *SgxRpcServer) Commit(args *keeper.CommitArgs, reply *keeper.CommitReply) error {
  rpc Commit(CommitRequest) returns (CommitResponse) {
  }

  // func (s *SgxRpcServer) StateDBAddBalance(args *keeper.StateDBAddBalanceArgs, reply *keeper.StateDBAddBalanceReply) error {
  rpc StateDBAddBalance(StateDBAddBalanceRequest) returns (StateDBAddBalanceResponse) {
  }

  // func (s *SgxRpcServer) StateDBSubBalance(args *keeper.StateDBSubBalanceArgs, reply *keeper.StateDBSubBalanceReply) error {
  rpc StateDBSubBalance(StateDBSubBalanceRequest) returns (StateDBSubBalanceResponse) {
  }
  
  // func (s *SgxRpcServer) StateDBSetNonce(args *keeper.StateDBSetNonceArgs, reply *keeper.StateDBSetNonceReply) error {
  rpc StateDBSetNonce(StateDBSetNonceRequest) returns (StateDBSetNonceResponse) {
  }

  // func (s *SgxRpcServer) StateDBIncreaseNonce(args *keeper.StateDBIncreaseNonceArgs, reply *keeper.StateDBIncreaseNonceReply) error {
  rpc StateDBIncreaseNonce(StateDBIncreaseNonceRequest) returns (StateDBIncreaseNonceResponse) {
  }

  // func (s *SgxRpcServer) StateDBPrepare(args *keeper.StateDBPrepareArgs, reply *keeper.StateDBPrepareReply) error {
  rpc StateDBPrepare(StateDBPrepareRequest) returns (StateDBPrepareResponse) {
  }

  // func (s *SgxRpcServer) StateDBGetRefund(args *keeper.StateDBGetRefundArgs, reply *keeper.StateDBGetRefundReply) error {
  rpc StateDBGetRefund(StateDBGetRefundRequest) returns (StateDBGetRefundResponse) {
  }

  // func (s *SgxRpcServer) StateDBGetLogs(args *keeper.StateDBGetLogsArgs, reply *keeper.StateDBGetLogsReply) error {
  rpc StateDBGetLogs(StateDBGetLogsRequest) returns (StateDBGetLogsResponse) {
  }
}

message PrepareTxRequest {
  bytes tx_hash = 1;
  // Header is the Tendermint header of the block in which the transaction
  // will be executed.
  tendermint.types.Header header = 2[(gogoproto.nullable) = false]; // Header cmtproto.Header
  // Msg is the EVM transaction message to run on the EVM.
  Message msg = 3[(gogoproto.nullable) = false]; // Msg core.Message
  // EvmConfig is the EVM configuration to set.
  PrepareTxEVMConfig evm_config = 4[(gogoproto.nullable) = false]; // EvmConfig PrepareTxEVMConfig
}

message PrepareTxResponse {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id  = 1;
}

message CreateRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
  // caller is the account that creates the contract.
  // Original data type: common.Address
  bytes caller      = 2; 
  bytes code        = 3;
  uint64 gas        = 4;   
  // value is the amount of wei to send with the contract creation.
  uint64 value      = 5;
}

message CreateResponse {
  bytes ret            = 1;
  // Original data type: common.Address
  bytes contract_addr  = 2;
  uint64 left_over_gas = 3; 
}

message CallRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
  // Original data type: vm.AccountRef
  bytes caller      = 2;
  // Original data type: common.Address
  bytes addr        = 3;
  // Original data type: []byte
  bytes input       = 4;
  uint64 gas        = 5;
  // Original data type: *big.Int
  uint64 value      = 6;
}

message CallResponse {
  bytes ret             = 1;
  uint64 left_over_gas  = 2;
}

message CommitRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
}

message CommitResponse {
}

message StateDBAddBalanceRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id       = 1;
  // caller is the account to add balance too.
  bytes caller            = 2;
  // amount is the amount to add.
  uint64 amount           = 3;
}

message StateDBAddBalanceResponse {
}

message StateDBSubBalanceRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
  // caller is the account to substract balance from.
  bytes caller      = 2;
  // amount is the amount to substract.
  uint64 amount     = 3;
}

message StateDBSubBalanceResponse {
}

message StateDBSetNonceRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
  // Original data type: vm.AccountRef
  bytes caller      = 2;
  uint64 nonce      = 3;
}

message StateDBSetNonceResponse {
}

message StateDBIncreaseNonceRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
  // Original data type: vm.AccountRef
  bytes caller      = 2;
}

message StateDBIncreaseNonceResponse {
}

// Rules wraps ChainConfig and is merely syntactic sugar or can be used for functions
// that do not have or require information about the block.
//
// It is taken from geth:
// https://github.com/ethereum/go-ethereum/blob/v1.13.5/params/config.go#L848
message Rules {
  uint64 chain_id = 1;
	bool is_homestead = 2;
  bool is_e_i_p150 = 3;
  bool is_e_i_p155 = 4;
  bool is_e_i_p158 = 5;
	bool is_byzantium = 6;
  bool is_constantinople = 7;
  bool is_petersburg = 8;
  bool is_istanbul = 9;
	bool is_berlin = 10;
  bool is_london = 11;
  bool is_merge = 12;
  bool is_shanghai = 13;
  bool is_cancun = 14;
  bool is_prague = 15;
  bool is_verkle = 16;
}

// AccessTuple is the element type of an access list.
//
// It is taken from geth:
// https://github.com/ethereum/go-ethereum/blob/v1.13.5/core/types/tx_access_list.go#L33
message AccessTuple {
  // Original data type: common.Address
  bytes address = 1;
  // Original data type: []common.Hash
  repeated bytes storage_keys    = 2;

}

message StateDBPrepareRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
  // Original data type: common.Address
  bytes sender         = 2;
  // Original data type: common.Address
  bytes coinbase       = 3;
  // Original data type: common.Address
  bytes dest           = 4;
  Rules rules         = 5;
  repeated AccessTuple access_list = 6;
}

message StateDBPrepareResponse {
}

message StateDBGetRefundRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
}

message StateDBGetRefundResponse {
  uint64 refund = 1;
}

message StateDBGetLogsRequest {
  // handler_id is the unique request ID that is given by the SGX binary.
  uint64 handler_id = 1;
}

message StateDBGetLogsResponse {
  repeated EthLog log = 1; // []*ethtypes.Log
}

message Message {
  // Original type: *common.Address
	bytes to          = 1;
  // Original type: common.Address
	bytes from        = 2;
	uint64 nonce      = 3;
  // *big.Int
	uint64 value      = 4;
	uint64 gas_limit  = 5;    
  // Original type: *big.Int
	uint64 gas_price  = 6;
  // Original type: *big.Int
	uint64 gas_fee_cap = 7;
  // Original type: *big.Int
	uint64 gas_tip_cap = 8;
	bytes data        = 9;
  // Original types: AccessList
  repeated AccessTuple access_list  = 10 [(gogoproto.nullable) = false];
  // Original type:  *big.Int
	uint64 blob_gas_fee_cap           = 11;
	// Original type: []common.Hash
  repeated bytes blob_hashes        = 12;
	// When SkipAccountChecks is true, the message nonce is not checked against the
	// account nonce in state. It also disables checking that the sender is an EOA.
	// This field will be set to true for operations like RPC eth_call.
	bool skip_account_checks          = 13;
}

message PrepareTxEVMConfig {
	// ChainConfig is the EVM chain configuration in JSON format. Since the
	// underlying params.ChainConfig struct contains pointer fields, they are
	// not serializable over RPC with gob. Instead, the JSON representation is
	// used.
	bytes chain_config_json     = 1;
	// Fields from EVMConfig
	// Original type: common.Address
	bytes coin_base            = 2;
	// Original type: *big.Int
	uint64 base_fee            = 3;
	// Original type: statedb.TxConfig
	TxConfig tx_config         = 4[(gogoproto.nullable) = false];
	bool debug_trace           = 5;
	// Fields from EVMConfig.FeeMarketParams struct
	bool no_base_fee            = 6;
	// Fields from EVMConfig.Params struct
	string evm_denom           = 7;
	repeated int64 extra_eips  = 8;
	// *rpctypes.StateOverride : original type
	bytes overrides           = 9;
}

// TxConfig encapulates the readonly information of current tx for `StateDB`.
message TxConfig {
	// Original type:  common.Hash 
	bytes block_hash  = 1; // hash of current block
	// Original type: common.Hash 
	bytes tx_hash     = 2; // hash of current tx
	uint64 tx_index   = 3; // the index of current transaction
	uint64 log_index  = 4; // the index of next log within current block
}

message EthLog {
	// Consensus fields:
	// address of the contract that generated the event
	// Original type: common.Address
	bytes address = 1;
	// list of topics provided by the contract.
	// Original type: []common.Hash
	repeated bytes topics = 2;
	// supplied by the contract, usually ABI-encoded
	bytes data = 3;
	// Derived fields. These fields are filled in by the node
	// but not secured by consensus.
	// block in which the transaction was included
	uint64 block_number = 4;
	// hash of the transaction
	bytes tx_hash = 5;
	// index of the transaction in the block
	uint64 tx_index = 6;
	// hash of the block in which the transaction was included
  // Original type: common.Hash
	bytes block_hash = 7;
	// index of the log in the block
	uint64 index = 8;

	// The Removed field is true if this log was reverted due to a chain reorganisation.
	// You must pay attention to this field if you receive logs through a filter query.
	bool removed = 9;
}