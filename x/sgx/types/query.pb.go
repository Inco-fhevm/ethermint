// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/sgx/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrepareTxRequest struct {
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Header is the Tendermint header of the block in which the transaction
	// will be executed.
	Header []byte `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Msg is the EVM transaction message to run on the EVM.
	Msg []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// EvmConfig is the EVM configuration to set.
	EvmConfig []byte `protobuf:"bytes,4,opt,name=evm_config,json=evmConfig,proto3" json:"evm_config,omitempty"`
}

func (m *PrepareTxRequest) Reset()         { *m = PrepareTxRequest{} }
func (m *PrepareTxRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareTxRequest) ProtoMessage()    {}
func (*PrepareTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{0}
}
func (m *PrepareTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareTxRequest.Merge(m, src)
}
func (m *PrepareTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrepareTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareTxRequest proto.InternalMessageInfo

func (m *PrepareTxRequest) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PrepareTxRequest) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PrepareTxRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PrepareTxRequest) GetEvmConfig() []byte {
	if m != nil {
		return m.EvmConfig
	}
	return nil
}

type PrepareTxResponse struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
}

func (m *PrepareTxResponse) Reset()         { *m = PrepareTxResponse{} }
func (m *PrepareTxResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareTxResponse) ProtoMessage()    {}
func (*PrepareTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{1}
}
func (m *PrepareTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareTxResponse.Merge(m, src)
}
func (m *PrepareTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrepareTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareTxResponse proto.InternalMessageInfo

func (m *PrepareTxResponse) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

type CreateRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Code   []byte `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Gas    uint64 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	// Original data type: *big.Int
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{2}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *CreateRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *CreateRequest) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *CreateRequest) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *CreateRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CreateResponse struct {
	Ret []byte `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	// Original data type: common.Address
	ContractAddr string `protobuf:"bytes,2,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	LeftOverGas  uint64 `protobuf:"varint,3,opt,name=left_over_gas,json=leftOverGas,proto3" json:"left_over_gas,omitempty"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{3}
}
func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetRet() []byte {
	if m != nil {
		return m.Ret
	}
	return nil
}

func (m *CreateResponse) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *CreateResponse) GetLeftOverGas() uint64 {
	if m != nil {
		return m.LeftOverGas
	}
	return 0
}

type CallRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// Original data type: common.Address
	Addr string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	// Original data type: []byte
	Input []byte `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Gas   uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Original data type: *big.Int
	Value []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CallRequest) Reset()         { *m = CallRequest{} }
func (m *CallRequest) String() string { return proto.CompactTextString(m) }
func (*CallRequest) ProtoMessage()    {}
func (*CallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{4}
}
func (m *CallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallRequest.Merge(m, src)
}
func (m *CallRequest) XXX_Size() int {
	return m.Size()
}
func (m *CallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CallRequest proto.InternalMessageInfo

func (m *CallRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *CallRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *CallRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *CallRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *CallRequest) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *CallRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CallResponse struct {
	Ret         []byte `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	LeftOverGas uint64 `protobuf:"varint,2,opt,name=left_over_gas,json=leftOverGas,proto3" json:"left_over_gas,omitempty"`
}

func (m *CallResponse) Reset()         { *m = CallResponse{} }
func (m *CallResponse) String() string { return proto.CompactTextString(m) }
func (*CallResponse) ProtoMessage()    {}
func (*CallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{5}
}
func (m *CallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallResponse.Merge(m, src)
}
func (m *CallResponse) XXX_Size() int {
	return m.Size()
}
func (m *CallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CallResponse proto.InternalMessageInfo

func (m *CallResponse) GetRet() []byte {
	if m != nil {
		return m.Ret
	}
	return nil
}

func (m *CallResponse) GetLeftOverGas() uint64 {
	if m != nil {
		return m.LeftOverGas
	}
	return 0
}

type CommitRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	Commit    bool   `protobuf:"varint,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{6}
}
func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *CommitRequest) GetCommit() bool {
	if m != nil {
		return m.Commit
	}
	return false
}

type CommitResponse struct {
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{7}
}
func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

type StateDBAddBalanceRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// Original data type: core.Message
	Msg         []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	LeftOverGas uint64 `protobuf:"varint,4,opt,name=left_over_gas,json=leftOverGas,proto3" json:"left_over_gas,omitempty"`
}

func (m *StateDBAddBalanceRequest) Reset()         { *m = StateDBAddBalanceRequest{} }
func (m *StateDBAddBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBAddBalanceRequest) ProtoMessage()    {}
func (*StateDBAddBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{8}
}
func (m *StateDBAddBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBAddBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBAddBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBAddBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBAddBalanceRequest.Merge(m, src)
}
func (m *StateDBAddBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBAddBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBAddBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBAddBalanceRequest proto.InternalMessageInfo

func (m *StateDBAddBalanceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBAddBalanceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *StateDBAddBalanceRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *StateDBAddBalanceRequest) GetLeftOverGas() uint64 {
	if m != nil {
		return m.LeftOverGas
	}
	return 0
}

type StateDBAddBalanceResponse struct {
}

func (m *StateDBAddBalanceResponse) Reset()         { *m = StateDBAddBalanceResponse{} }
func (m *StateDBAddBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBAddBalanceResponse) ProtoMessage()    {}
func (*StateDBAddBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{9}
}
func (m *StateDBAddBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBAddBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBAddBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBAddBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBAddBalanceResponse.Merge(m, src)
}
func (m *StateDBAddBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBAddBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBAddBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBAddBalanceResponse proto.InternalMessageInfo

type StateDBSubBalanceRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// Original data type: core.Message
	Msg []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *StateDBSubBalanceRequest) Reset()         { *m = StateDBSubBalanceRequest{} }
func (m *StateDBSubBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBSubBalanceRequest) ProtoMessage()    {}
func (*StateDBSubBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{10}
}
func (m *StateDBSubBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSubBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSubBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSubBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSubBalanceRequest.Merge(m, src)
}
func (m *StateDBSubBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSubBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSubBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSubBalanceRequest proto.InternalMessageInfo

func (m *StateDBSubBalanceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBSubBalanceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *StateDBSubBalanceRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StateDBSubBalanceResponse struct {
}

func (m *StateDBSubBalanceResponse) Reset()         { *m = StateDBSubBalanceResponse{} }
func (m *StateDBSubBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBSubBalanceResponse) ProtoMessage()    {}
func (*StateDBSubBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{11}
}
func (m *StateDBSubBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSubBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSubBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSubBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSubBalanceResponse.Merge(m, src)
}
func (m *StateDBSubBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSubBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSubBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSubBalanceResponse proto.InternalMessageInfo

type StateDBSetNonceRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Nonce  uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *StateDBSetNonceRequest) Reset()         { *m = StateDBSetNonceRequest{} }
func (m *StateDBSetNonceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBSetNonceRequest) ProtoMessage()    {}
func (*StateDBSetNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{12}
}
func (m *StateDBSetNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSetNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSetNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSetNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSetNonceRequest.Merge(m, src)
}
func (m *StateDBSetNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSetNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSetNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSetNonceRequest proto.InternalMessageInfo

func (m *StateDBSetNonceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBSetNonceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *StateDBSetNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type StateDBSetNonceResponse struct {
}

func (m *StateDBSetNonceResponse) Reset()         { *m = StateDBSetNonceResponse{} }
func (m *StateDBSetNonceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBSetNonceResponse) ProtoMessage()    {}
func (*StateDBSetNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{13}
}
func (m *StateDBSetNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSetNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSetNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSetNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSetNonceResponse.Merge(m, src)
}
func (m *StateDBSetNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSetNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSetNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSetNonceResponse proto.InternalMessageInfo

type StateDBIncreaseNonceRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// Original data type: core.Message
	Msg []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *StateDBIncreaseNonceRequest) Reset()         { *m = StateDBIncreaseNonceRequest{} }
func (m *StateDBIncreaseNonceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBIncreaseNonceRequest) ProtoMessage()    {}
func (*StateDBIncreaseNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{14}
}
func (m *StateDBIncreaseNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBIncreaseNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBIncreaseNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBIncreaseNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBIncreaseNonceRequest.Merge(m, src)
}
func (m *StateDBIncreaseNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBIncreaseNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBIncreaseNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBIncreaseNonceRequest proto.InternalMessageInfo

func (m *StateDBIncreaseNonceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBIncreaseNonceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *StateDBIncreaseNonceRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StateDBIncreaseNonceResponse struct {
}

func (m *StateDBIncreaseNonceResponse) Reset()         { *m = StateDBIncreaseNonceResponse{} }
func (m *StateDBIncreaseNonceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBIncreaseNonceResponse) ProtoMessage()    {}
func (*StateDBIncreaseNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{15}
}
func (m *StateDBIncreaseNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBIncreaseNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBIncreaseNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBIncreaseNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBIncreaseNonceResponse.Merge(m, src)
}
func (m *StateDBIncreaseNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBIncreaseNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBIncreaseNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBIncreaseNonceResponse proto.InternalMessageInfo

type StateDBPrepareRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: core.Message
	Msg []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// Original data type: params.Rules
	Rules []byte `protobuf:"bytes,3,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (m *StateDBPrepareRequest) Reset()         { *m = StateDBPrepareRequest{} }
func (m *StateDBPrepareRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBPrepareRequest) ProtoMessage()    {}
func (*StateDBPrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{16}
}
func (m *StateDBPrepareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBPrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBPrepareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBPrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBPrepareRequest.Merge(m, src)
}
func (m *StateDBPrepareRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBPrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBPrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBPrepareRequest proto.InternalMessageInfo

func (m *StateDBPrepareRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBPrepareRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *StateDBPrepareRequest) GetRules() []byte {
	if m != nil {
		return m.Rules
	}
	return nil
}

type StateDBPrepareResponse struct {
}

func (m *StateDBPrepareResponse) Reset()         { *m = StateDBPrepareResponse{} }
func (m *StateDBPrepareResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBPrepareResponse) ProtoMessage()    {}
func (*StateDBPrepareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{17}
}
func (m *StateDBPrepareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBPrepareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBPrepareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBPrepareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBPrepareResponse.Merge(m, src)
}
func (m *StateDBPrepareResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBPrepareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBPrepareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBPrepareResponse proto.InternalMessageInfo

type StateDBGetRefundRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
}

func (m *StateDBGetRefundRequest) Reset()         { *m = StateDBGetRefundRequest{} }
func (m *StateDBGetRefundRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBGetRefundRequest) ProtoMessage()    {}
func (*StateDBGetRefundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{18}
}
func (m *StateDBGetRefundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetRefundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetRefundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetRefundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetRefundRequest.Merge(m, src)
}
func (m *StateDBGetRefundRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetRefundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetRefundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetRefundRequest proto.InternalMessageInfo

func (m *StateDBGetRefundRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

type StateDBGetRefundResponse struct {
	Refund uint64 `protobuf:"varint,1,opt,name=refund,proto3" json:"refund,omitempty"`
}

func (m *StateDBGetRefundResponse) Reset()         { *m = StateDBGetRefundResponse{} }
func (m *StateDBGetRefundResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBGetRefundResponse) ProtoMessage()    {}
func (*StateDBGetRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{19}
}
func (m *StateDBGetRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetRefundResponse.Merge(m, src)
}
func (m *StateDBGetRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetRefundResponse proto.InternalMessageInfo

func (m *StateDBGetRefundResponse) GetRefund() uint64 {
	if m != nil {
		return m.Refund
	}
	return 0
}

type StateDBGetLogsRequest struct {
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
}

func (m *StateDBGetLogsRequest) Reset()         { *m = StateDBGetLogsRequest{} }
func (m *StateDBGetLogsRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBGetLogsRequest) ProtoMessage()    {}
func (*StateDBGetLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{20}
}
func (m *StateDBGetLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetLogsRequest.Merge(m, src)
}
func (m *StateDBGetLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetLogsRequest proto.InternalMessageInfo

func (m *StateDBGetLogsRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

type StateDBGetLogsResponse struct {
	Logs []byte `protobuf:"bytes,1,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (m *StateDBGetLogsResponse) Reset()         { *m = StateDBGetLogsResponse{} }
func (m *StateDBGetLogsResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBGetLogsResponse) ProtoMessage()    {}
func (*StateDBGetLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{21}
}
func (m *StateDBGetLogsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetLogsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetLogsResponse.Merge(m, src)
}
func (m *StateDBGetLogsResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetLogsResponse proto.InternalMessageInfo

func (m *StateDBGetLogsResponse) GetLogs() []byte {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto.RegisterType((*PrepareTxRequest)(nil), "ethermint.sgx.v1.PrepareTxRequest")
	proto.RegisterType((*PrepareTxResponse)(nil), "ethermint.sgx.v1.PrepareTxResponse")
	proto.RegisterType((*CreateRequest)(nil), "ethermint.sgx.v1.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "ethermint.sgx.v1.CreateResponse")
	proto.RegisterType((*CallRequest)(nil), "ethermint.sgx.v1.CallRequest")
	proto.RegisterType((*CallResponse)(nil), "ethermint.sgx.v1.CallResponse")
	proto.RegisterType((*CommitRequest)(nil), "ethermint.sgx.v1.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "ethermint.sgx.v1.CommitResponse")
	proto.RegisterType((*StateDBAddBalanceRequest)(nil), "ethermint.sgx.v1.StateDBAddBalanceRequest")
	proto.RegisterType((*StateDBAddBalanceResponse)(nil), "ethermint.sgx.v1.StateDBAddBalanceResponse")
	proto.RegisterType((*StateDBSubBalanceRequest)(nil), "ethermint.sgx.v1.StateDBSubBalanceRequest")
	proto.RegisterType((*StateDBSubBalanceResponse)(nil), "ethermint.sgx.v1.StateDBSubBalanceResponse")
	proto.RegisterType((*StateDBSetNonceRequest)(nil), "ethermint.sgx.v1.StateDBSetNonceRequest")
	proto.RegisterType((*StateDBSetNonceResponse)(nil), "ethermint.sgx.v1.StateDBSetNonceResponse")
	proto.RegisterType((*StateDBIncreaseNonceRequest)(nil), "ethermint.sgx.v1.StateDBIncreaseNonceRequest")
	proto.RegisterType((*StateDBIncreaseNonceResponse)(nil), "ethermint.sgx.v1.StateDBIncreaseNonceResponse")
	proto.RegisterType((*StateDBPrepareRequest)(nil), "ethermint.sgx.v1.StateDBPrepareRequest")
	proto.RegisterType((*StateDBPrepareResponse)(nil), "ethermint.sgx.v1.StateDBPrepareResponse")
	proto.RegisterType((*StateDBGetRefundRequest)(nil), "ethermint.sgx.v1.StateDBGetRefundRequest")
	proto.RegisterType((*StateDBGetRefundResponse)(nil), "ethermint.sgx.v1.StateDBGetRefundResponse")
	proto.RegisterType((*StateDBGetLogsRequest)(nil), "ethermint.sgx.v1.StateDBGetLogsRequest")
	proto.RegisterType((*StateDBGetLogsResponse)(nil), "ethermint.sgx.v1.StateDBGetLogsResponse")
}

func init() { proto.RegisterFile("ethermint/sgx/v1/query.proto", fileDescriptor_1d9fb6e76534f03e) }

var fileDescriptor_1d9fb6e76534f03e = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcb, 0x8f, 0xdb, 0x44,
	0x18, 0x8f, 0x37, 0x0f, 0x9a, 0xaf, 0xc9, 0x92, 0x8e, 0xc2, 0x36, 0x75, 0x5b, 0x53, 0xb9, 0x12,
	0x2c, 0x05, 0x12, 0x75, 0x91, 0x10, 0x47, 0xba, 0xa9, 0x08, 0x95, 0x78, 0x66, 0x11, 0x07, 0x0e,
	0x44, 0xb3, 0xf6, 0x17, 0x3b, 0xaa, 0x1f, 0xd9, 0x99, 0xb1, 0xc9, 0x5e, 0xb9, 0x70, 0xe5, 0xc4,
	0xdf, 0x84, 0xc4, 0x65, 0x8f, 0x1c, 0xd1, 0xee, 0x3f, 0x82, 0x3c, 0x9e, 0x38, 0x0f, 0xdb, 0x21,
	0x68, 0xe1, 0x36, 0xdf, 0xf3, 0xf7, 0xfb, 0xbe, 0x4c, 0x7e, 0x63, 0x78, 0x84, 0xc2, 0x45, 0xe6,
	0xcf, 0x02, 0x31, 0xe0, 0xce, 0x62, 0x10, 0x3f, 0x1f, 0x5c, 0x44, 0xc8, 0x2e, 0xfb, 0x73, 0x16,
	0x8a, 0x90, 0x74, 0xb2, 0x68, 0x9f, 0x3b, 0x8b, 0x7e, 0xfc, 0xdc, 0x14, 0xd0, 0xf9, 0x86, 0xe1,
	0x9c, 0x32, 0xfc, 0x6e, 0x31, 0xc6, 0x8b, 0x08, 0xb9, 0x20, 0xf7, 0xe1, 0x0d, 0xb1, 0x98, 0xb8,
	0x94, 0xbb, 0x3d, 0xed, 0x89, 0x76, 0xdc, 0x1a, 0x37, 0xc4, 0xe2, 0x73, 0xca, 0x5d, 0x72, 0x04,
	0x0d, 0x17, 0xa9, 0x8d, 0xac, 0x77, 0x90, 0xfa, 0x53, 0x8b, 0x74, 0xa0, 0xea, 0x73, 0xa7, 0x57,
	0x95, 0xce, 0xe4, 0x48, 0x1e, 0x03, 0x60, 0xec, 0x4f, 0xac, 0x30, 0x98, 0xce, 0x9c, 0x5e, 0x4d,
	0x06, 0x9a, 0x18, 0xfb, 0x43, 0xe9, 0x30, 0x4f, 0xe0, 0xde, 0x1a, 0x2a, 0x9f, 0x87, 0x01, 0xc7,
	0xa4, 0xc6, 0xa5, 0x81, 0xed, 0x21, 0x9b, 0xcc, 0x6c, 0x89, 0x5c, 0x1b, 0x37, 0x95, 0xe7, 0x95,
	0x6d, 0xfe, 0xac, 0x41, 0x7b, 0xc8, 0x90, 0x0a, 0x5c, 0xf2, 0xdc, 0x5d, 0x90, 0xb0, 0xb5, 0xa8,
	0xe7, 0xad, 0xd8, 0xa6, 0x16, 0x21, 0x50, 0xb3, 0x42, 0x1b, 0x15, 0x5d, 0x79, 0x4e, 0x26, 0x70,
	0x28, 0x97, 0x44, 0x6b, 0xe3, 0xe4, 0x48, 0xba, 0x50, 0x8f, 0xa9, 0x17, 0x61, 0xaf, 0x2e, 0xd3,
	0x52, 0xc3, 0x7c, 0x0d, 0x87, 0x4b, 0x0e, 0x8a, 0x75, 0x07, 0xaa, 0x0c, 0x85, 0x5a, 0x54, 0x72,
	0x24, 0x4f, 0xa1, 0x6d, 0x85, 0x81, 0x60, 0xd4, 0x12, 0x13, 0x6a, 0xdb, 0x29, 0x7c, 0x73, 0xdc,
	0x5a, 0x3a, 0x5f, 0xd8, 0x36, 0x23, 0x26, 0xb4, 0x3d, 0x9c, 0x8a, 0x49, 0x18, 0x23, 0x9b, 0x24,
	0xd0, 0x55, 0x09, 0x7d, 0x37, 0x71, 0x7e, 0x1d, 0x23, 0x1b, 0x51, 0x6e, 0xfe, 0xa6, 0xc1, 0xdd,
	0x21, 0xf5, 0xbc, 0xdb, 0xcf, 0x2b, 0x69, 0x54, 0x25, 0x0d, 0x79, 0x4e, 0xa6, 0x9b, 0x05, 0xf3,
	0x48, 0xa8, 0x9f, 0x26, 0x35, 0x96, 0x5b, 0xa8, 0x17, 0x6c, 0xa1, 0xb1, 0xbe, 0x85, 0x97, 0xd0,
	0x4a, 0x79, 0x95, 0xee, 0x20, 0x37, 0xde, 0x41, 0x7e, 0xbc, 0xcf, 0xa0, 0x3d, 0x0c, 0x7d, 0x7f,
	0x26, 0xfe, 0xc5, 0x7c, 0x32, 0x5f, 0x36, 0xbb, 0x33, 0x56, 0x96, 0xd9, 0x81, 0xc3, 0x65, 0x9f,
	0x94, 0x8f, 0xf9, 0x8b, 0x06, 0xbd, 0x33, 0x41, 0x05, 0xbe, 0x3c, 0x7d, 0x61, 0xdb, 0xa7, 0xd4,
	0xa3, 0x81, 0x75, 0xdb, 0x5b, 0x93, 0xbf, 0xe3, 0xb9, 0x19, 0x6b, 0xf9, 0x19, 0x1f, 0xc2, 0x83,
	0x02, 0x22, 0x8a, 0xa6, 0x95, 0xb1, 0x3c, 0x8b, 0xce, 0xff, 0x27, 0x96, 0x6b, 0x0c, 0xd6, 0x41,
	0x14, 0x03, 0x84, 0xa3, 0x65, 0x10, 0xc5, 0x57, 0xe1, 0xed, 0xf1, 0xbb, 0x50, 0x0f, 0x92, 0x36,
	0xea, 0x3a, 0xa7, 0x86, 0xf9, 0x00, 0xee, 0xe7, 0x60, 0x14, 0x83, 0x29, 0x3c, 0x54, 0xa1, 0x57,
	0x81, 0xc5, 0x90, 0x72, 0xfc, 0x2f, 0x68, 0xe4, 0xd7, 0x60, 0xc0, 0xa3, 0x62, 0x1c, 0xc5, 0xe3,
	0x47, 0x78, 0x4b, 0xc5, 0x95, 0x30, 0xed, 0xc9, 0x40, 0x21, 0x1d, 0xac, 0xae, 0x45, 0x17, 0xea,
	0x2c, 0xf2, 0x90, 0x2b, 0xf4, 0xd4, 0x30, 0x7b, 0xd9, 0xa6, 0xb3, 0xfe, 0x0a, 0xf9, 0x93, 0x6c,
	0x39, 0x23, 0x14, 0x63, 0x9c, 0x46, 0x81, 0xbd, 0x1f, 0xb6, 0x79, 0x92, 0xdd, 0x9f, 0xb5, 0x4a,
	0xf5, 0x97, 0x3c, 0x82, 0x06, 0x93, 0x1e, 0x55, 0xa6, 0x2c, 0xf3, 0xe3, 0x6c, 0xce, 0x11, 0x8a,
	0x2f, 0x42, 0x87, 0xef, 0x89, 0xf5, 0x41, 0xc6, 0x3f, 0xab, 0x53, 0x48, 0x04, 0x6a, 0x5e, 0xe8,
	0x70, 0xf5, 0xef, 0x97, 0xe7, 0x93, 0x3f, 0xee, 0x40, 0xeb, 0xdb, 0xe4, 0xdd, 0x39, 0x43, 0x16,
	0xcf, 0x2c, 0x24, 0xdf, 0x43, 0x33, 0x13, 0x7c, 0x62, 0xf6, 0xb7, 0x9f, 0xa1, 0xfe, 0xf6, 0x1b,
	0xa4, 0x3f, 0xdd, 0x99, 0xa3, 0x56, 0x57, 0x21, 0x5f, 0x42, 0x23, 0xd5, 0x63, 0xf2, 0x76, 0xbe,
	0x60, 0xe3, 0xb5, 0xd0, 0x9f, 0x94, 0x27, 0x64, 0xed, 0x46, 0x50, 0x4b, 0x84, 0x8d, 0x3c, 0x2e,
	0xc8, 0x5d, 0x09, 0xb1, 0x6e, 0x94, 0x85, 0x37, 0x78, 0x49, 0x4d, 0x2a, 0xe4, 0xb5, 0xae, 0x7a,
	0x85, 0xbc, 0x36, 0xe5, 0xac, 0x42, 0x02, 0xb8, 0x97, 0x93, 0x11, 0xf2, 0x2c, 0x5f, 0x58, 0x26,
	0x7a, 0xfa, 0xfb, 0x7b, 0xe5, 0x16, 0xe0, 0xad, 0x44, 0x63, 0x07, 0x5e, 0x4e, 0xbe, 0x76, 0xe0,
	0x15, 0xa8, 0x50, 0x85, 0xb8, 0xf0, 0xe6, 0x96, 0x40, 0x90, 0xe3, 0xf2, 0x0e, 0x9b, 0x52, 0xa5,
	0xbf, 0xb7, 0x47, 0x66, 0x86, 0xf4, 0x13, 0x74, 0x8b, 0x74, 0x80, 0x7c, 0x58, 0xda, 0xa4, 0x48,
	0x97, 0xf4, 0xfe, 0xbe, 0xe9, 0x19, 0x30, 0xc2, 0xe1, 0xa6, 0x00, 0x90, 0x77, 0x4b, 0x7b, 0x6c,
	0x4a, 0x90, 0x7e, 0xfc, 0xcf, 0x89, 0x19, 0xcc, 0x6b, 0xe8, 0x6c, 0x6b, 0x02, 0x29, 0x5f, 0xd0,
	0xb6, 0xe2, 0xe8, 0xcf, 0xf6, 0x49, 0x2d, 0x98, 0x49, 0x89, 0xc2, 0x8e, 0x99, 0x36, 0xe5, 0x66,
	0xc7, 0x4c, 0x5b, 0xfa, 0x62, 0x56, 0x4e, 0x3f, 0xfd, 0xfd, 0xda, 0xd0, 0xae, 0xae, 0x0d, 0xed,
	0xaf, 0x6b, 0x43, 0xfb, 0xf5, 0xc6, 0xa8, 0x5c, 0xdd, 0x18, 0x95, 0x3f, 0x6f, 0x8c, 0xca, 0x0f,
	0xef, 0x38, 0x33, 0xe1, 0x46, 0xe7, 0x7d, 0x2b, 0xf4, 0x07, 0x18, 0xfb, 0x21, 0x1f, 0xac, 0x3e,
	0x7f, 0x17, 0xf2, 0x03, 0x58, 0x5c, 0xce, 0x91, 0x9f, 0x37, 0xe4, 0xe7, 0xef, 0x47, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xaa, 0x0e, 0x62, 0xd9, 0x1e, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// func (s *SgxRpcServer) PrepareTx(args *keeper.PrepareTxArgs, reply *keeper.PrepareTxReply) error {
	PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error)
	// func (s *SgxRpcServer) Create(args *keeper.CreateArgs, reply *keeper.CreateReply) error {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// func (s *SgxRpcServer) Call(args *keeper.CallArgs, reply *keeper.CallReply) error {
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// func (s *SgxRpcServer) Commit(args *keeper.CommitArgs, reply *keeper.CommitReply) error {
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// func (s *SgxRpcServer) StateDBAddBalance(args *keeper.StateDBAddBalanceArgs, reply *keeper.StateDBAddBalanceReply) error {
	StateDBAddBalance(ctx context.Context, in *StateDBAddBalanceRequest, opts ...grpc.CallOption) (*StateDBAddBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSubBalance(args *keeper.StateDBSubBalanceArgs, reply *keeper.StateDBSubBalanceReply) error {
	StateDBSubBalance(ctx context.Context, in *StateDBSubBalanceRequest, opts ...grpc.CallOption) (*StateDBSubBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSetNonce(args *keeper.StateDBSetNonceArgs, reply *keeper.StateDBSetNonceReply) error {
	StateDBSetNonce(ctx context.Context, in *StateDBSetNonceRequest, opts ...grpc.CallOption) (*StateDBSetNonceResponse, error)
	// func (s *SgxRpcServer) StateDBIncreaseNonce(args *keeper.StateDBIncreaseNonceArgs, reply *keeper.StateDBIncreaseNonceReply) error {
	StateDBIncreaseNonce(ctx context.Context, in *StateDBIncreaseNonceRequest, opts ...grpc.CallOption) (*StateDBIncreaseNonceResponse, error)
	// func (s *SgxRpcServer) StateDBPrepare(args *keeper.StateDBPrepareArgs, reply *keeper.StateDBPrepareReply) error {
	StateDBPrepare(ctx context.Context, in *StateDBPrepareRequest, opts ...grpc.CallOption) (*StateDBPrepareResponse, error)
	// func (s *SgxRpcServer) StateDBGetRefund(args *keeper.StateDBGetRefundArgs, reply *keeper.StateDBGetRefundReply) error {
	StateDBGetRefund(ctx context.Context, in *StateDBGetRefundRequest, opts ...grpc.CallOption) (*StateDBGetRefundResponse, error)
	// func (s *SgxRpcServer) StateDBGetLogs(args *keeper.StateDBGetLogsArgs, reply *keeper.StateDBGetLogsReply) error {
	StateDBGetLogs(ctx context.Context, in *StateDBGetLogsRequest, opts ...grpc.CallOption) (*StateDBGetLogsResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error) {
	out := new(PrepareTxResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/PrepareTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBAddBalance(ctx context.Context, in *StateDBAddBalanceRequest, opts ...grpc.CallOption) (*StateDBAddBalanceResponse, error) {
	out := new(StateDBAddBalanceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBAddBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBSubBalance(ctx context.Context, in *StateDBSubBalanceRequest, opts ...grpc.CallOption) (*StateDBSubBalanceResponse, error) {
	out := new(StateDBSubBalanceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBSubBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBSetNonce(ctx context.Context, in *StateDBSetNonceRequest, opts ...grpc.CallOption) (*StateDBSetNonceResponse, error) {
	out := new(StateDBSetNonceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBSetNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBIncreaseNonce(ctx context.Context, in *StateDBIncreaseNonceRequest, opts ...grpc.CallOption) (*StateDBIncreaseNonceResponse, error) {
	out := new(StateDBIncreaseNonceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBIncreaseNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBPrepare(ctx context.Context, in *StateDBPrepareRequest, opts ...grpc.CallOption) (*StateDBPrepareResponse, error) {
	out := new(StateDBPrepareResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBGetRefund(ctx context.Context, in *StateDBGetRefundRequest, opts ...grpc.CallOption) (*StateDBGetRefundResponse, error) {
	out := new(StateDBGetRefundResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBGetRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBGetLogs(ctx context.Context, in *StateDBGetLogsRequest, opts ...grpc.CallOption) (*StateDBGetLogsResponse, error) {
	out := new(StateDBGetLogsResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBGetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// func (s *SgxRpcServer) PrepareTx(args *keeper.PrepareTxArgs, reply *keeper.PrepareTxReply) error {
	PrepareTx(context.Context, *PrepareTxRequest) (*PrepareTxResponse, error)
	// func (s *SgxRpcServer) Create(args *keeper.CreateArgs, reply *keeper.CreateReply) error {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// func (s *SgxRpcServer) Call(args *keeper.CallArgs, reply *keeper.CallReply) error {
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// func (s *SgxRpcServer) Commit(args *keeper.CommitArgs, reply *keeper.CommitReply) error {
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// func (s *SgxRpcServer) StateDBAddBalance(args *keeper.StateDBAddBalanceArgs, reply *keeper.StateDBAddBalanceReply) error {
	StateDBAddBalance(context.Context, *StateDBAddBalanceRequest) (*StateDBAddBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSubBalance(args *keeper.StateDBSubBalanceArgs, reply *keeper.StateDBSubBalanceReply) error {
	StateDBSubBalance(context.Context, *StateDBSubBalanceRequest) (*StateDBSubBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSetNonce(args *keeper.StateDBSetNonceArgs, reply *keeper.StateDBSetNonceReply) error {
	StateDBSetNonce(context.Context, *StateDBSetNonceRequest) (*StateDBSetNonceResponse, error)
	// func (s *SgxRpcServer) StateDBIncreaseNonce(args *keeper.StateDBIncreaseNonceArgs, reply *keeper.StateDBIncreaseNonceReply) error {
	StateDBIncreaseNonce(context.Context, *StateDBIncreaseNonceRequest) (*StateDBIncreaseNonceResponse, error)
	// func (s *SgxRpcServer) StateDBPrepare(args *keeper.StateDBPrepareArgs, reply *keeper.StateDBPrepareReply) error {
	StateDBPrepare(context.Context, *StateDBPrepareRequest) (*StateDBPrepareResponse, error)
	// func (s *SgxRpcServer) StateDBGetRefund(args *keeper.StateDBGetRefundArgs, reply *keeper.StateDBGetRefundReply) error {
	StateDBGetRefund(context.Context, *StateDBGetRefundRequest) (*StateDBGetRefundResponse, error)
	// func (s *SgxRpcServer) StateDBGetLogs(args *keeper.StateDBGetLogsArgs, reply *keeper.StateDBGetLogsReply) error {
	StateDBGetLogs(context.Context, *StateDBGetLogsRequest) (*StateDBGetLogsResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) PrepareTx(ctx context.Context, req *PrepareTxRequest) (*PrepareTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTx not implemented")
}
func (*UnimplementedQueryServiceServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedQueryServiceServer) Call(ctx context.Context, req *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedQueryServiceServer) Commit(ctx context.Context, req *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBAddBalance(ctx context.Context, req *StateDBAddBalanceRequest) (*StateDBAddBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBAddBalance not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBSubBalance(ctx context.Context, req *StateDBSubBalanceRequest) (*StateDBSubBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBSubBalance not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBSetNonce(ctx context.Context, req *StateDBSetNonceRequest) (*StateDBSetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBSetNonce not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBIncreaseNonce(ctx context.Context, req *StateDBIncreaseNonceRequest) (*StateDBIncreaseNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBIncreaseNonce not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBPrepare(ctx context.Context, req *StateDBPrepareRequest) (*StateDBPrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBPrepare not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBGetRefund(ctx context.Context, req *StateDBGetRefundRequest) (*StateDBGetRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBGetRefund not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBGetLogs(ctx context.Context, req *StateDBGetLogsRequest) (*StateDBGetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBGetLogs not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_PrepareTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PrepareTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/PrepareTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PrepareTx(ctx, req.(*PrepareTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBAddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBAddBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBAddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBAddBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBAddBalance(ctx, req.(*StateDBAddBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBSubBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBSubBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBSubBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBSubBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBSubBalance(ctx, req.(*StateDBSubBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBSetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBSetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBSetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBSetNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBSetNonce(ctx, req.(*StateDBSetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBIncreaseNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBIncreaseNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBIncreaseNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBIncreaseNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBIncreaseNonce(ctx, req.(*StateDBIncreaseNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBPrepare(ctx, req.(*StateDBPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBGetRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBGetRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBGetRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBGetRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBGetRefund(ctx, req.(*StateDBGetRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBGetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBGetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBGetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBGetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBGetLogs(ctx, req.(*StateDBGetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethermint.sgx.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareTx",
			Handler:    _QueryService_PrepareTx_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _QueryService_Create_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _QueryService_Call_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _QueryService_Commit_Handler,
		},
		{
			MethodName: "StateDBAddBalance",
			Handler:    _QueryService_StateDBAddBalance_Handler,
		},
		{
			MethodName: "StateDBSubBalance",
			Handler:    _QueryService_StateDBSubBalance_Handler,
		},
		{
			MethodName: "StateDBSetNonce",
			Handler:    _QueryService_StateDBSetNonce_Handler,
		},
		{
			MethodName: "StateDBIncreaseNonce",
			Handler:    _QueryService_StateDBIncreaseNonce_Handler,
		},
		{
			MethodName: "StateDBPrepare",
			Handler:    _QueryService_StateDBPrepare_Handler,
		},
		{
			MethodName: "StateDBGetRefund",
			Handler:    _QueryService_StateDBGetRefund_Handler,
		},
		{
			MethodName: "StateDBGetLogs",
			Handler:    _QueryService_StateDBGetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethermint/sgx/v1/query.proto",
}

func (m *PrepareTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmConfig) > 0 {
		i -= len(m.EvmConfig)
		copy(dAtA[i:], m.EvmConfig)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmConfig)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Gas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftOverGas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LeftOverGas))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ret) > 0 {
		i -= len(m.Ret)
		copy(dAtA[i:], m.Ret)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x32
	}
	if m.Gas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftOverGas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LeftOverGas))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ret) > 0 {
		i -= len(m.Ret)
		copy(dAtA[i:], m.Ret)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Commit {
		i--
		if m.Commit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBAddBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBAddBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBAddBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftOverGas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LeftOverGas))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBAddBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBAddBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBAddBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBSubBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSubBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSubBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBSubBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSubBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSubBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBSetNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSetNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSetNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBSetNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSetNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSetNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBIncreaseNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBIncreaseNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBIncreaseNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBIncreaseNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBIncreaseNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBIncreaseNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBPrepareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBPrepareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBPrepareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		i -= len(m.Rules)
		copy(dAtA[i:], m.Rules)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Rules)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBPrepareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBPrepareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBPrepareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBGetRefundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetRefundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetRefundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBGetRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Refund != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Refund))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBGetLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBGetLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetLogsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		i -= len(m.Logs)
		copy(dAtA[i:], m.Logs)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Logs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrepareTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EvmConfig)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PrepareTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Gas != 0 {
		n += 1 + sovQuery(uint64(m.Gas))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ret)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LeftOverGas != 0 {
		n += 1 + sovQuery(uint64(m.LeftOverGas))
	}
	return n
}

func (m *CallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Gas != 0 {
		n += 1 + sovQuery(uint64(m.Gas))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ret)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LeftOverGas != 0 {
		n += 1 + sovQuery(uint64(m.LeftOverGas))
	}
	return n
}

func (m *CommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	if m.Commit {
		n += 2
	}
	return n
}

func (m *CommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBAddBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LeftOverGas != 0 {
		n += 1 + sovQuery(uint64(m.LeftOverGas))
	}
	return n
}

func (m *StateDBAddBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBSubBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StateDBSubBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBSetNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *StateDBSetNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBIncreaseNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StateDBIncreaseNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBPrepareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Rules)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StateDBPrepareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBGetRefundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	return n
}

func (m *StateDBGetRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refund != 0 {
		n += 1 + sovQuery(uint64(m.Refund))
	}
	return n
}

func (m *StateDBGetLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	return n
}

func (m *StateDBGetLogsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Logs)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrepareTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header[:0], dAtA[iNdEx:postIndex]...)
			if m.Header == nil {
				m.Header = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmConfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmConfig = append(m.EvmConfig[:0], dAtA[iNdEx:postIndex]...)
			if m.EvmConfig == nil {
				m.EvmConfig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = append(m.Ret[:0], dAtA[iNdEx:postIndex]...)
			if m.Ret == nil {
				m.Ret = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftOverGas", wireType)
			}
			m.LeftOverGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftOverGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = append(m.Ret[:0], dAtA[iNdEx:postIndex]...)
			if m.Ret == nil {
				m.Ret = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftOverGas", wireType)
			}
			m.LeftOverGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftOverGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBAddBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBAddBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBAddBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftOverGas", wireType)
			}
			m.LeftOverGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftOverGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBAddBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBAddBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBAddBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSubBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSubBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSubBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSubBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSubBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSubBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSetNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSetNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSetNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSetNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSetNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSetNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBIncreaseNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBIncreaseNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBIncreaseNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBIncreaseNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBIncreaseNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBIncreaseNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBPrepareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBPrepareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBPrepareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules[:0], dAtA[iNdEx:postIndex]...)
			if m.Rules == nil {
				m.Rules = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBPrepareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBPrepareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBPrepareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetRefundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetRefundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetRefundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			m.Refund = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refund |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs[:0], dAtA[iNdEx:postIndex]...)
			if m.Logs == nil {
				m.Logs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
