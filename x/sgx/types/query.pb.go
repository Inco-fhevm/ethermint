// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/sgx/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cometbft/cometbft/proto/tendermint/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrepareTxRequest struct {
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Header is the Tendermint header of the block in which the transaction
	// will be executed.
	Header types.Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header"`
	// Msg is the EVM transaction message to run on the EVM.
	// Original type: core.Message
	Msg []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// EvmConfig is the EVM configuration to set.
	EvmConfig PrepareTxEVMConfig `protobuf:"bytes,4,opt,name=evm_config,json=evmConfig,proto3" json:"evm_config"`
}

func (m *PrepareTxRequest) Reset()         { *m = PrepareTxRequest{} }
func (m *PrepareTxRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareTxRequest) ProtoMessage()    {}
func (*PrepareTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{0}
}
func (m *PrepareTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareTxRequest.Merge(m, src)
}
func (m *PrepareTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrepareTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareTxRequest proto.InternalMessageInfo

func (m *PrepareTxRequest) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PrepareTxRequest) GetHeader() types.Header {
	if m != nil {
		return m.Header
	}
	return types.Header{}
}

func (m *PrepareTxRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PrepareTxRequest) GetEvmConfig() PrepareTxEVMConfig {
	if m != nil {
		return m.EvmConfig
	}
	return PrepareTxEVMConfig{}
}

type PrepareTxResponse struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
}

func (m *PrepareTxResponse) Reset()         { *m = PrepareTxResponse{} }
func (m *PrepareTxResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareTxResponse) ProtoMessage()    {}
func (*PrepareTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{1}
}
func (m *PrepareTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareTxResponse.Merge(m, src)
}
func (m *PrepareTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrepareTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareTxResponse proto.InternalMessageInfo

func (m *PrepareTxResponse) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

type CreateRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// caller is the account that creates the contract.
	// Original data type: common.Address
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Code   []byte `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Gas    uint64 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	// value is the amount of wei to send with the contract creation.
	Value uint64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{2}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *CreateRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *CreateRequest) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *CreateRequest) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *CreateRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type CreateResponse struct {
	Ret []byte `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	// Original data type: common.Address
	ContractAddr []byte `protobuf:"bytes,2,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	LeftOverGas  uint64 `protobuf:"varint,3,opt,name=left_over_gas,json=leftOverGas,proto3" json:"left_over_gas,omitempty"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{3}
}
func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetRet() []byte {
	if m != nil {
		return m.Ret
	}
	return nil
}

func (m *CreateResponse) GetContractAddr() []byte {
	if m != nil {
		return m.ContractAddr
	}
	return nil
}

func (m *CreateResponse) GetLeftOverGas() uint64 {
	if m != nil {
		return m.LeftOverGas
	}
	return 0
}

type CallRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// Original data type: common.Address
	Addr []byte `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	// Original data type: []byte
	Input []byte `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Gas   uint64 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	// Original data type: *big.Int
	Value uint64 `protobuf:"varint,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CallRequest) Reset()         { *m = CallRequest{} }
func (m *CallRequest) String() string { return proto.CompactTextString(m) }
func (*CallRequest) ProtoMessage()    {}
func (*CallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{4}
}
func (m *CallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallRequest.Merge(m, src)
}
func (m *CallRequest) XXX_Size() int {
	return m.Size()
}
func (m *CallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CallRequest proto.InternalMessageInfo

func (m *CallRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *CallRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *CallRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *CallRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *CallRequest) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *CallRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type CallResponse struct {
	Ret         []byte `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	LeftOverGas uint64 `protobuf:"varint,2,opt,name=left_over_gas,json=leftOverGas,proto3" json:"left_over_gas,omitempty"`
}

func (m *CallResponse) Reset()         { *m = CallResponse{} }
func (m *CallResponse) String() string { return proto.CompactTextString(m) }
func (*CallResponse) ProtoMessage()    {}
func (*CallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{5}
}
func (m *CallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallResponse.Merge(m, src)
}
func (m *CallResponse) XXX_Size() int {
	return m.Size()
}
func (m *CallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CallResponse proto.InternalMessageInfo

func (m *CallResponse) GetRet() []byte {
	if m != nil {
		return m.Ret
	}
	return nil
}

func (m *CallResponse) GetLeftOverGas() uint64 {
	if m != nil {
		return m.LeftOverGas
	}
	return 0
}

type CommitRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{6}
}
func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

type CommitResponse struct {
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{7}
}
func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

type StateDBAddBalanceRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// caller is the account to add balance too.
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// amount is the amount to add.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *StateDBAddBalanceRequest) Reset()         { *m = StateDBAddBalanceRequest{} }
func (m *StateDBAddBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBAddBalanceRequest) ProtoMessage()    {}
func (*StateDBAddBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{8}
}
func (m *StateDBAddBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBAddBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBAddBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBAddBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBAddBalanceRequest.Merge(m, src)
}
func (m *StateDBAddBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBAddBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBAddBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBAddBalanceRequest proto.InternalMessageInfo

func (m *StateDBAddBalanceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBAddBalanceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *StateDBAddBalanceRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type StateDBAddBalanceResponse struct {
}

func (m *StateDBAddBalanceResponse) Reset()         { *m = StateDBAddBalanceResponse{} }
func (m *StateDBAddBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBAddBalanceResponse) ProtoMessage()    {}
func (*StateDBAddBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{9}
}
func (m *StateDBAddBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBAddBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBAddBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBAddBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBAddBalanceResponse.Merge(m, src)
}
func (m *StateDBAddBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBAddBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBAddBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBAddBalanceResponse proto.InternalMessageInfo

type StateDBSubBalanceRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// caller is the account to substract balance from.
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	// amount is the amount to substract.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *StateDBSubBalanceRequest) Reset()         { *m = StateDBSubBalanceRequest{} }
func (m *StateDBSubBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBSubBalanceRequest) ProtoMessage()    {}
func (*StateDBSubBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{10}
}
func (m *StateDBSubBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSubBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSubBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSubBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSubBalanceRequest.Merge(m, src)
}
func (m *StateDBSubBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSubBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSubBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSubBalanceRequest proto.InternalMessageInfo

func (m *StateDBSubBalanceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBSubBalanceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *StateDBSubBalanceRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type StateDBSubBalanceResponse struct {
}

func (m *StateDBSubBalanceResponse) Reset()         { *m = StateDBSubBalanceResponse{} }
func (m *StateDBSubBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBSubBalanceResponse) ProtoMessage()    {}
func (*StateDBSubBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{11}
}
func (m *StateDBSubBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSubBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSubBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSubBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSubBalanceResponse.Merge(m, src)
}
func (m *StateDBSubBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSubBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSubBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSubBalanceResponse proto.InternalMessageInfo

type StateDBSetNonceRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	Nonce  uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *StateDBSetNonceRequest) Reset()         { *m = StateDBSetNonceRequest{} }
func (m *StateDBSetNonceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBSetNonceRequest) ProtoMessage()    {}
func (*StateDBSetNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{12}
}
func (m *StateDBSetNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSetNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSetNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSetNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSetNonceRequest.Merge(m, src)
}
func (m *StateDBSetNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSetNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSetNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSetNonceRequest proto.InternalMessageInfo

func (m *StateDBSetNonceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBSetNonceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *StateDBSetNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type StateDBSetNonceResponse struct {
}

func (m *StateDBSetNonceResponse) Reset()         { *m = StateDBSetNonceResponse{} }
func (m *StateDBSetNonceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBSetNonceResponse) ProtoMessage()    {}
func (*StateDBSetNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{13}
}
func (m *StateDBSetNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBSetNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBSetNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBSetNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBSetNonceResponse.Merge(m, src)
}
func (m *StateDBSetNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBSetNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBSetNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBSetNonceResponse proto.InternalMessageInfo

type StateDBIncreaseNonceRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: vm.AccountRef
	Caller []byte `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
}

func (m *StateDBIncreaseNonceRequest) Reset()         { *m = StateDBIncreaseNonceRequest{} }
func (m *StateDBIncreaseNonceRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBIncreaseNonceRequest) ProtoMessage()    {}
func (*StateDBIncreaseNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{14}
}
func (m *StateDBIncreaseNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBIncreaseNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBIncreaseNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBIncreaseNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBIncreaseNonceRequest.Merge(m, src)
}
func (m *StateDBIncreaseNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBIncreaseNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBIncreaseNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBIncreaseNonceRequest proto.InternalMessageInfo

func (m *StateDBIncreaseNonceRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBIncreaseNonceRequest) GetCaller() []byte {
	if m != nil {
		return m.Caller
	}
	return nil
}

type StateDBIncreaseNonceResponse struct {
}

func (m *StateDBIncreaseNonceResponse) Reset()         { *m = StateDBIncreaseNonceResponse{} }
func (m *StateDBIncreaseNonceResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBIncreaseNonceResponse) ProtoMessage()    {}
func (*StateDBIncreaseNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{15}
}
func (m *StateDBIncreaseNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBIncreaseNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBIncreaseNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBIncreaseNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBIncreaseNonceResponse.Merge(m, src)
}
func (m *StateDBIncreaseNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBIncreaseNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBIncreaseNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBIncreaseNonceResponse proto.InternalMessageInfo

// Rules wraps ChainConfig and is merely syntactic sugar or can be used for functions
// that do not have or require information about the block.
//
// It is taken from geth:
// https://github.com/ethereum/go-ethereum/blob/v1.13.5/params/config.go#L848
type Rules struct {
	ChainId          uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IsHomestead      bool   `protobuf:"varint,2,opt,name=is_homestead,json=isHomestead,proto3" json:"is_homestead,omitempty"`
	IsEIP150         bool   `protobuf:"varint,3,opt,name=is_e_i_p150,json=isEIP150,proto3" json:"is_e_i_p150,omitempty"`
	IsEIP155         bool   `protobuf:"varint,4,opt,name=is_e_i_p155,json=isEIP155,proto3" json:"is_e_i_p155,omitempty"`
	IsEIP158         bool   `protobuf:"varint,5,opt,name=is_e_i_p158,json=isEIP158,proto3" json:"is_e_i_p158,omitempty"`
	IsByzantium      bool   `protobuf:"varint,6,opt,name=is_byzantium,json=isByzantium,proto3" json:"is_byzantium,omitempty"`
	IsConstantinople bool   `protobuf:"varint,7,opt,name=is_constantinople,json=isConstantinople,proto3" json:"is_constantinople,omitempty"`
	IsPetersburg     bool   `protobuf:"varint,8,opt,name=is_petersburg,json=isPetersburg,proto3" json:"is_petersburg,omitempty"`
	IsIstanbul       bool   `protobuf:"varint,9,opt,name=is_istanbul,json=isIstanbul,proto3" json:"is_istanbul,omitempty"`
	IsBerlin         bool   `protobuf:"varint,10,opt,name=is_berlin,json=isBerlin,proto3" json:"is_berlin,omitempty"`
	IsLondon         bool   `protobuf:"varint,11,opt,name=is_london,json=isLondon,proto3" json:"is_london,omitempty"`
	IsMerge          bool   `protobuf:"varint,12,opt,name=is_merge,json=isMerge,proto3" json:"is_merge,omitempty"`
	IsShanghai       bool   `protobuf:"varint,13,opt,name=is_shanghai,json=isShanghai,proto3" json:"is_shanghai,omitempty"`
	IsCancun         bool   `protobuf:"varint,14,opt,name=is_cancun,json=isCancun,proto3" json:"is_cancun,omitempty"`
	IsPrague         bool   `protobuf:"varint,15,opt,name=is_prague,json=isPrague,proto3" json:"is_prague,omitempty"`
	IsVerkle         bool   `protobuf:"varint,16,opt,name=is_verkle,json=isVerkle,proto3" json:"is_verkle,omitempty"`
}

func (m *Rules) Reset()         { *m = Rules{} }
func (m *Rules) String() string { return proto.CompactTextString(m) }
func (*Rules) ProtoMessage()    {}
func (*Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{16}
}
func (m *Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rules.Merge(m, src)
}
func (m *Rules) XXX_Size() int {
	return m.Size()
}
func (m *Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_Rules.DiscardUnknown(m)
}

var xxx_messageInfo_Rules proto.InternalMessageInfo

func (m *Rules) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Rules) GetIsHomestead() bool {
	if m != nil {
		return m.IsHomestead
	}
	return false
}

func (m *Rules) GetIsEIP150() bool {
	if m != nil {
		return m.IsEIP150
	}
	return false
}

func (m *Rules) GetIsEIP155() bool {
	if m != nil {
		return m.IsEIP155
	}
	return false
}

func (m *Rules) GetIsEIP158() bool {
	if m != nil {
		return m.IsEIP158
	}
	return false
}

func (m *Rules) GetIsByzantium() bool {
	if m != nil {
		return m.IsByzantium
	}
	return false
}

func (m *Rules) GetIsConstantinople() bool {
	if m != nil {
		return m.IsConstantinople
	}
	return false
}

func (m *Rules) GetIsPetersburg() bool {
	if m != nil {
		return m.IsPetersburg
	}
	return false
}

func (m *Rules) GetIsIstanbul() bool {
	if m != nil {
		return m.IsIstanbul
	}
	return false
}

func (m *Rules) GetIsBerlin() bool {
	if m != nil {
		return m.IsBerlin
	}
	return false
}

func (m *Rules) GetIsLondon() bool {
	if m != nil {
		return m.IsLondon
	}
	return false
}

func (m *Rules) GetIsMerge() bool {
	if m != nil {
		return m.IsMerge
	}
	return false
}

func (m *Rules) GetIsShanghai() bool {
	if m != nil {
		return m.IsShanghai
	}
	return false
}

func (m *Rules) GetIsCancun() bool {
	if m != nil {
		return m.IsCancun
	}
	return false
}

func (m *Rules) GetIsPrague() bool {
	if m != nil {
		return m.IsPrague
	}
	return false
}

func (m *Rules) GetIsVerkle() bool {
	if m != nil {
		return m.IsVerkle
	}
	return false
}

// AccessTuple is the element type of an access list.
//
// It is taken from geth:
// https://github.com/ethereum/go-ethereum/blob/v1.13.5/core/types/tx_access_list.go#L33
type AccessTuple struct {
	// Original data type: common.Address
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Original data type: []common.Hash
	StorageKeys [][]byte `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
}

func (m *AccessTuple) Reset()         { *m = AccessTuple{} }
func (m *AccessTuple) String() string { return proto.CompactTextString(m) }
func (*AccessTuple) ProtoMessage()    {}
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{17}
}
func (m *AccessTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessTuple.Merge(m, src)
}
func (m *AccessTuple) XXX_Size() int {
	return m.Size()
}
func (m *AccessTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessTuple.DiscardUnknown(m)
}

var xxx_messageInfo_AccessTuple proto.InternalMessageInfo

func (m *AccessTuple) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AccessTuple) GetStorageKeys() [][]byte {
	if m != nil {
		return m.StorageKeys
	}
	return nil
}

type StateDBPrepareRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	// Original data type: common.Address
	Sender []byte `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Original data type: common.Address
	Coinbase []byte `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Original data type: common.Address
	Dest []byte `protobuf:"bytes,4,opt,name=dest,proto3" json:"dest,omitempty"`
	// Original type: params.Rules
	Rules      []byte         `protobuf:"bytes,5,opt,name=rules,proto3" json:"rules,omitempty"`
	AccessList []*AccessTuple `protobuf:"bytes,6,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
}

func (m *StateDBPrepareRequest) Reset()         { *m = StateDBPrepareRequest{} }
func (m *StateDBPrepareRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBPrepareRequest) ProtoMessage()    {}
func (*StateDBPrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{18}
}
func (m *StateDBPrepareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBPrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBPrepareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBPrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBPrepareRequest.Merge(m, src)
}
func (m *StateDBPrepareRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBPrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBPrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBPrepareRequest proto.InternalMessageInfo

func (m *StateDBPrepareRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

func (m *StateDBPrepareRequest) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *StateDBPrepareRequest) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *StateDBPrepareRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *StateDBPrepareRequest) GetRules() []byte {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *StateDBPrepareRequest) GetAccessList() []*AccessTuple {
	if m != nil {
		return m.AccessList
	}
	return nil
}

type StateDBPrepareResponse struct {
}

func (m *StateDBPrepareResponse) Reset()         { *m = StateDBPrepareResponse{} }
func (m *StateDBPrepareResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBPrepareResponse) ProtoMessage()    {}
func (*StateDBPrepareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{19}
}
func (m *StateDBPrepareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBPrepareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBPrepareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBPrepareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBPrepareResponse.Merge(m, src)
}
func (m *StateDBPrepareResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBPrepareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBPrepareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBPrepareResponse proto.InternalMessageInfo

type StateDBGetRefundRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
}

func (m *StateDBGetRefundRequest) Reset()         { *m = StateDBGetRefundRequest{} }
func (m *StateDBGetRefundRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBGetRefundRequest) ProtoMessage()    {}
func (*StateDBGetRefundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{20}
}
func (m *StateDBGetRefundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetRefundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetRefundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetRefundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetRefundRequest.Merge(m, src)
}
func (m *StateDBGetRefundRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetRefundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetRefundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetRefundRequest proto.InternalMessageInfo

func (m *StateDBGetRefundRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

type StateDBGetRefundResponse struct {
	Refund uint64 `protobuf:"varint,1,opt,name=refund,proto3" json:"refund,omitempty"`
}

func (m *StateDBGetRefundResponse) Reset()         { *m = StateDBGetRefundResponse{} }
func (m *StateDBGetRefundResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBGetRefundResponse) ProtoMessage()    {}
func (*StateDBGetRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{21}
}
func (m *StateDBGetRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetRefundResponse.Merge(m, src)
}
func (m *StateDBGetRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetRefundResponse proto.InternalMessageInfo

func (m *StateDBGetRefundResponse) GetRefund() uint64 {
	if m != nil {
		return m.Refund
	}
	return 0
}

type StateDBGetLogsRequest struct {
	// handler_id is the unique request ID that is given by the SGX binary.
	HandlerId uint64 `protobuf:"varint,1,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
}

func (m *StateDBGetLogsRequest) Reset()         { *m = StateDBGetLogsRequest{} }
func (m *StateDBGetLogsRequest) String() string { return proto.CompactTextString(m) }
func (*StateDBGetLogsRequest) ProtoMessage()    {}
func (*StateDBGetLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{22}
}
func (m *StateDBGetLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetLogsRequest.Merge(m, src)
}
func (m *StateDBGetLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetLogsRequest proto.InternalMessageInfo

func (m *StateDBGetLogsRequest) GetHandlerId() uint64 {
	if m != nil {
		return m.HandlerId
	}
	return 0
}

type StateDBGetLogsResponse struct {
	Log []*EthLog `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
}

func (m *StateDBGetLogsResponse) Reset()         { *m = StateDBGetLogsResponse{} }
func (m *StateDBGetLogsResponse) String() string { return proto.CompactTextString(m) }
func (*StateDBGetLogsResponse) ProtoMessage()    {}
func (*StateDBGetLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{23}
}
func (m *StateDBGetLogsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateDBGetLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateDBGetLogsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateDBGetLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateDBGetLogsResponse.Merge(m, src)
}
func (m *StateDBGetLogsResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateDBGetLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateDBGetLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateDBGetLogsResponse proto.InternalMessageInfo

func (m *StateDBGetLogsResponse) GetLog() []*EthLog {
	if m != nil {
		return m.Log
	}
	return nil
}

type Message struct {
	// Original type: *common.Address
	To []byte `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// Original type: common.Address
	From []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Original type: uint64
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Original type: *big.Int
	Value uint64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// Original type: uint64
	GasLimit uint64 `protobuf:"varint,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Original type: *big.Int
	GasPrice uint64 `protobuf:"varint,6,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Original type: *big.Int
	GasFeeCap uint64 `protobuf:"varint,7,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	// Original type: *big.Int
	GasTipCap uint64 `protobuf:"varint,8,opt,name=gas_tip_cap,json=gasTipCap,proto3" json:"gas_tip_cap,omitempty"`
	// Original type: []byte
	Data []byte `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	// Original types: AccessList
	AccessList []AccessTuple `protobuf:"bytes,10,rep,name=access_list,json=accessList,proto3" json:"access_list"`
	// Original type:  *big.Int
	BlobGasFeeCap uint64 `protobuf:"varint,11,opt,name=blob_gas_fee_cap,json=blobGasFeeCap,proto3" json:"blob_gas_fee_cap,omitempty"`
	// Original type: []common.Hash
	BlobHashes [][]byte `protobuf:"bytes,12,rep,name=blob_hashes,json=blobHashes,proto3" json:"blob_hashes,omitempty"`
	// When SkipAccountChecks is true, the message nonce is not checked against the
	// account nonce in state. It also disables checking that the sender is an EOA.
	// This field will be set to true for operations like RPC eth_call.
	// Original type: bool
	SkipAccountChecks bool `protobuf:"varint,13,opt,name=skip_account_checks,json=skipAccountChecks,proto3" json:"skip_account_checks,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{24}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Message) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Message) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Message) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *Message) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *Message) GetGasFeeCap() uint64 {
	if m != nil {
		return m.GasFeeCap
	}
	return 0
}

func (m *Message) GetGasTipCap() uint64 {
	if m != nil {
		return m.GasTipCap
	}
	return 0
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetAccessList() []AccessTuple {
	if m != nil {
		return m.AccessList
	}
	return nil
}

func (m *Message) GetBlobGasFeeCap() uint64 {
	if m != nil {
		return m.BlobGasFeeCap
	}
	return 0
}

func (m *Message) GetBlobHashes() [][]byte {
	if m != nil {
		return m.BlobHashes
	}
	return nil
}

func (m *Message) GetSkipAccountChecks() bool {
	if m != nil {
		return m.SkipAccountChecks
	}
	return false
}

type PrepareTxEVMConfig struct {
	// ChainConfig is the EVM chain configuration in JSON format. Since the
	// underlying params.ChainConfig struct contains pointer fields, they are
	// not serializable over RPC with gob. Instead, the JSON representation is
	// used.
	// Original type: params.ChainConfig
	ChainConfigJson []byte `protobuf:"bytes,1,opt,name=chain_config_json,json=chainConfigJson,proto3" json:"chain_config_json,omitempty"`
	// Fields from EVMConfig
	// Original type: common.Address
	CoinBase []byte `protobuf:"bytes,2,opt,name=coin_base,json=coinBase,proto3" json:"coin_base,omitempty"`
	// Original type: *big.Int
	BaseFee uint64 `protobuf:"varint,3,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	// Original type: statedb.TxConfig
	TxConfig TxConfig `protobuf:"bytes,4,opt,name=tx_config,json=txConfig,proto3" json:"tx_config"`
	// Original type: bool
	DebugTrace bool `protobuf:"varint,5,opt,name=debug_trace,json=debugTrace,proto3" json:"debug_trace,omitempty"`
	// Fields from EVMConfig.FeeMarketParams struct
	// Original type: bool
	NoBaseFee bool `protobuf:"varint,6,opt,name=no_base_fee,json=noBaseFee,proto3" json:"no_base_fee,omitempty"`
	// Fields from EVMConfig.Params struct
	// Original type: string
	EvmDenom string `protobuf:"bytes,7,opt,name=evm_denom,json=evmDenom,proto3" json:"evm_denom,omitempty"`
	// Original type: []int64
	ExtraEips []int64 `protobuf:"varint,8,rep,packed,name=extra_eips,json=extraEips,proto3" json:"extra_eips,omitempty"`
	// type StateOverride map[common.Address]OverrideAccount
	// Original type: *rpctypes.StateOverride
	Overrides []byte `protobuf:"bytes,9,opt,name=overrides,proto3" json:"overrides,omitempty"`
}

func (m *PrepareTxEVMConfig) Reset()         { *m = PrepareTxEVMConfig{} }
func (m *PrepareTxEVMConfig) String() string { return proto.CompactTextString(m) }
func (*PrepareTxEVMConfig) ProtoMessage()    {}
func (*PrepareTxEVMConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{25}
}
func (m *PrepareTxEVMConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareTxEVMConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareTxEVMConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareTxEVMConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareTxEVMConfig.Merge(m, src)
}
func (m *PrepareTxEVMConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrepareTxEVMConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareTxEVMConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareTxEVMConfig proto.InternalMessageInfo

func (m *PrepareTxEVMConfig) GetChainConfigJson() []byte {
	if m != nil {
		return m.ChainConfigJson
	}
	return nil
}

func (m *PrepareTxEVMConfig) GetCoinBase() []byte {
	if m != nil {
		return m.CoinBase
	}
	return nil
}

func (m *PrepareTxEVMConfig) GetBaseFee() uint64 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *PrepareTxEVMConfig) GetTxConfig() TxConfig {
	if m != nil {
		return m.TxConfig
	}
	return TxConfig{}
}

func (m *PrepareTxEVMConfig) GetDebugTrace() bool {
	if m != nil {
		return m.DebugTrace
	}
	return false
}

func (m *PrepareTxEVMConfig) GetNoBaseFee() bool {
	if m != nil {
		return m.NoBaseFee
	}
	return false
}

func (m *PrepareTxEVMConfig) GetEvmDenom() string {
	if m != nil {
		return m.EvmDenom
	}
	return ""
}

func (m *PrepareTxEVMConfig) GetExtraEips() []int64 {
	if m != nil {
		return m.ExtraEips
	}
	return nil
}

func (m *PrepareTxEVMConfig) GetOverrides() []byte {
	if m != nil {
		return m.Overrides
	}
	return nil
}

type ChainConfig struct {
	// Original type:*big.Int
	ChainID uint64 `protobuf:"varint,1,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty"`
	// Original type: *big.Int
	HomesteadBlock uint64 `protobuf:"varint,2,opt,name=homestead_block,json=homesteadBlock,proto3" json:"homestead_block,omitempty"`
	// Original type: *big.Int
	DAOForkBlock uint64 `protobuf:"varint,3,opt,name=d_a_o_fork_block,json=dAOForkBlock,proto3" json:"d_a_o_fork_block,omitempty"`
	// Original type: bool
	DAOForkSupport bool `protobuf:"varint,4,opt,name=d_a_o_fork_support,json=dAOForkSupport,proto3" json:"d_a_o_fork_support,omitempty"`
	// EIP150 implements the Gas price changes (https://github.com/ethereum/EIPs/issues/150)
	// Original type: *big.Int
	EIP_150Block uint64 `protobuf:"varint,5,opt,name=e_i_p_150_block,json=eIP150Block,proto3" json:"e_i_p_150_block,omitempty"`
	// Original type: *big.Int
	EIP155Block uint64 `protobuf:"varint,6,opt,name=e_i_p155_block,json=eIP155Block,proto3" json:"e_i_p155_block,omitempty"`
	// Original type: *big.Int
	EIP158Block uint64 `protobuf:"varint,7,opt,name=e_i_p158_block,json=eIP158Block,proto3" json:"e_i_p158_block,omitempty"`
	// Original type: *big.Int
	ByzantiumBlock uint64 `protobuf:"varint,8,opt,name=byzantium_block,json=byzantiumBlock,proto3" json:"byzantium_block,omitempty"`
	// Original type: *big.Int
	ConstantinopleBlock uint64 `protobuf:"varint,9,opt,name=constantinople_block,json=constantinopleBlock,proto3" json:"constantinople_block,omitempty"`
	// Original type: *big.Int
	PetersburgBlock uint64 `protobuf:"varint,10,opt,name=petersburg_block,json=petersburgBlock,proto3" json:"petersburg_block,omitempty"`
	// Original type: *big.Int
	IstanbulBlock uint64 `protobuf:"varint,11,opt,name=istanbul_block,json=istanbulBlock,proto3" json:"istanbul_block,omitempty"`
	// Original type: *big.Int
	MuirGlacierBlock uint64 `protobuf:"varint,12,opt,name=muir_glacier_block,json=muirGlacierBlock,proto3" json:"muir_glacier_block,omitempty"`
	// Original type: *big.Int
	BerlinBlock uint64 `protobuf:"varint,13,opt,name=berlin_block,json=berlinBlock,proto3" json:"berlin_block,omitempty"`
	// Original type: *big.Int
	LondonBlock uint64 `protobuf:"varint,14,opt,name=london_block,json=londonBlock,proto3" json:"london_block,omitempty"`
	// Original type: *big.Int
	ArrowGlacierBlock uint64 `protobuf:"varint,15,opt,name=arrow_glacier_block,json=arrowGlacierBlock,proto3" json:"arrow_glacier_block,omitempty"`
	// Original type: *big.Int
	GrayGlacierBlock uint64 `protobuf:"varint,16,opt,name=gray_glacier_block,json=grayGlacierBlock,proto3" json:"gray_glacier_block,omitempty"`
	// Original type: *big.Int
	MergeNetsplitBlock uint64 `protobuf:"varint,17,opt,name=merge_netsplit_block,json=mergeNetsplitBlock,proto3" json:"merge_netsplit_block,omitempty"`
	// Original type: *uint64
	ShanghaiTime uint64 `protobuf:"varint,18,opt,name=shanghai_time,json=shanghaiTime,proto3" json:"shanghai_time,omitempty"`
	// Original type: *uint64
	CancunTime uint64 `protobuf:"varint,19,opt,name=cancun_time,json=cancunTime,proto3" json:"cancun_time,omitempty"`
	// Original type: *uint64
	PragueTime uint64 `protobuf:"varint,20,opt,name=prague_time,json=pragueTime,proto3" json:"prague_time,omitempty"`
	// Original type: *uint64
	VerkleTime uint64 `protobuf:"varint,21,opt,name=verkle_time,json=verkleTime,proto3" json:"verkle_time,omitempty"`
	// TerminalTotalDifficulty is the amount of total difficulty reached by
	// the network that triggers the consensus upgrade.
	// Original type: *big.Int
	TerminalTotalDifficulty uint64 `protobuf:"varint,22,opt,name=terminal_total_difficulty,json=terminalTotalDifficulty,proto3" json:"terminal_total_difficulty,omitempty"`
	// TerminalTotalDifficultyPassed is a flag specifying that the network already
	// passed the terminal total difficulty. Its purpose is to disable legacy sync
	// even without having seen the TTD locally (safer long term).
	// Original type: bool
	TerminalTotalDifficultyPassed bool `protobuf:"varint,23,opt,name=terminal_total_difficulty_passed,json=terminalTotalDifficultyPassed,proto3" json:"terminal_total_difficulty_passed,omitempty"`
	// Various consensus engines
	// Original type: params.EthashConfig
	Ethash *EthashConfig `protobuf:"bytes,24,opt,name=ethash,proto3" json:"ethash,omitempty"`
	// Original type: params.CliqueConfig
	Clique *CliqueConfig `protobuf:"bytes,25,opt,name=clique,proto3" json:"clique,omitempty"`
	// Original type: bool
	IsDevMode bool `protobuf:"varint,26,opt,name=is_dev_mode,json=isDevMode,proto3" json:"is_dev_mode,omitempty"`
}

func (m *ChainConfig) Reset()         { *m = ChainConfig{} }
func (m *ChainConfig) String() string { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()    {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{26}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

func (m *ChainConfig) GetChainID() uint64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *ChainConfig) GetHomesteadBlock() uint64 {
	if m != nil {
		return m.HomesteadBlock
	}
	return 0
}

func (m *ChainConfig) GetDAOForkBlock() uint64 {
	if m != nil {
		return m.DAOForkBlock
	}
	return 0
}

func (m *ChainConfig) GetDAOForkSupport() bool {
	if m != nil {
		return m.DAOForkSupport
	}
	return false
}

func (m *ChainConfig) GetEIP_150Block() uint64 {
	if m != nil {
		return m.EIP_150Block
	}
	return 0
}

func (m *ChainConfig) GetEIP155Block() uint64 {
	if m != nil {
		return m.EIP155Block
	}
	return 0
}

func (m *ChainConfig) GetEIP158Block() uint64 {
	if m != nil {
		return m.EIP158Block
	}
	return 0
}

func (m *ChainConfig) GetByzantiumBlock() uint64 {
	if m != nil {
		return m.ByzantiumBlock
	}
	return 0
}

func (m *ChainConfig) GetConstantinopleBlock() uint64 {
	if m != nil {
		return m.ConstantinopleBlock
	}
	return 0
}

func (m *ChainConfig) GetPetersburgBlock() uint64 {
	if m != nil {
		return m.PetersburgBlock
	}
	return 0
}

func (m *ChainConfig) GetIstanbulBlock() uint64 {
	if m != nil {
		return m.IstanbulBlock
	}
	return 0
}

func (m *ChainConfig) GetMuirGlacierBlock() uint64 {
	if m != nil {
		return m.MuirGlacierBlock
	}
	return 0
}

func (m *ChainConfig) GetBerlinBlock() uint64 {
	if m != nil {
		return m.BerlinBlock
	}
	return 0
}

func (m *ChainConfig) GetLondonBlock() uint64 {
	if m != nil {
		return m.LondonBlock
	}
	return 0
}

func (m *ChainConfig) GetArrowGlacierBlock() uint64 {
	if m != nil {
		return m.ArrowGlacierBlock
	}
	return 0
}

func (m *ChainConfig) GetGrayGlacierBlock() uint64 {
	if m != nil {
		return m.GrayGlacierBlock
	}
	return 0
}

func (m *ChainConfig) GetMergeNetsplitBlock() uint64 {
	if m != nil {
		return m.MergeNetsplitBlock
	}
	return 0
}

func (m *ChainConfig) GetShanghaiTime() uint64 {
	if m != nil {
		return m.ShanghaiTime
	}
	return 0
}

func (m *ChainConfig) GetCancunTime() uint64 {
	if m != nil {
		return m.CancunTime
	}
	return 0
}

func (m *ChainConfig) GetPragueTime() uint64 {
	if m != nil {
		return m.PragueTime
	}
	return 0
}

func (m *ChainConfig) GetVerkleTime() uint64 {
	if m != nil {
		return m.VerkleTime
	}
	return 0
}

func (m *ChainConfig) GetTerminalTotalDifficulty() uint64 {
	if m != nil {
		return m.TerminalTotalDifficulty
	}
	return 0
}

func (m *ChainConfig) GetTerminalTotalDifficultyPassed() bool {
	if m != nil {
		return m.TerminalTotalDifficultyPassed
	}
	return false
}

func (m *ChainConfig) GetEthash() *EthashConfig {
	if m != nil {
		return m.Ethash
	}
	return nil
}

func (m *ChainConfig) GetClique() *CliqueConfig {
	if m != nil {
		return m.Clique
	}
	return nil
}

func (m *ChainConfig) GetIsDevMode() bool {
	if m != nil {
		return m.IsDevMode
	}
	return false
}

type EthashConfig struct {
}

func (m *EthashConfig) Reset()         { *m = EthashConfig{} }
func (m *EthashConfig) String() string { return proto.CompactTextString(m) }
func (*EthashConfig) ProtoMessage()    {}
func (*EthashConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{27}
}
func (m *EthashConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthashConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthashConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthashConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthashConfig.Merge(m, src)
}
func (m *EthashConfig) XXX_Size() int {
	return m.Size()
}
func (m *EthashConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EthashConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EthashConfig proto.InternalMessageInfo

// CliqueConfig is the consensus engine configs for proof-of-authority based sealing.
type CliqueConfig struct {
	// Original type: uint64
	Period uint64 `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`
	// Original type: uint64
	Epoch uint64 `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
}

func (m *CliqueConfig) Reset()         { *m = CliqueConfig{} }
func (m *CliqueConfig) String() string { return proto.CompactTextString(m) }
func (*CliqueConfig) ProtoMessage()    {}
func (*CliqueConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{28}
}
func (m *CliqueConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CliqueConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CliqueConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CliqueConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CliqueConfig.Merge(m, src)
}
func (m *CliqueConfig) XXX_Size() int {
	return m.Size()
}
func (m *CliqueConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CliqueConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CliqueConfig proto.InternalMessageInfo

func (m *CliqueConfig) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *CliqueConfig) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// TxConfig encapulates the readonly information of current tx for `StateDB`.
type TxConfig struct {
	// Original type:  common.Hash
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Original type: common.Hash
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Original type: int64
	TxIndex uint64 `protobuf:"varint,3,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// Original type: int64
	LogIndex uint64 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *TxConfig) Reset()         { *m = TxConfig{} }
func (m *TxConfig) String() string { return proto.CompactTextString(m) }
func (*TxConfig) ProtoMessage()    {}
func (*TxConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{29}
}
func (m *TxConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxConfig.Merge(m, src)
}
func (m *TxConfig) XXX_Size() int {
	return m.Size()
}
func (m *TxConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TxConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TxConfig proto.InternalMessageInfo

func (m *TxConfig) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *TxConfig) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *TxConfig) GetTxIndex() uint64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *TxConfig) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

type EthLog struct {
	// Consensus fields:
	// address of the contract that generated the event
	// Original type: common.Address
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// list of topics provided by the contract.
	// Original type: []common.Hash
	Topics [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// supplied by the contract, usually ABI-encoded
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Derived fields. These fields are filled in by the node
	// but not secured by consensus.
	// block in which the transaction was included
	BlockNumber uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// hash of the transaction
	TxHash []byte `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// index of the transaction in the block
	TxIndex uint64 `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// hash of the block in which the transaction was included
	// Original type: common.Hash
	BlockHash []byte `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// index of the log in the block
	Index uint64 `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	// The Removed field is true if this log was reverted due to a chain reorganisation.
	// You must pay attention to this field if you receive logs through a filter query.
	Removed bool `protobuf:"varint,9,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (m *EthLog) Reset()         { *m = EthLog{} }
func (m *EthLog) String() string { return proto.CompactTextString(m) }
func (*EthLog) ProtoMessage()    {}
func (*EthLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9fb6e76534f03e, []int{30}
}
func (m *EthLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthLog.Merge(m, src)
}
func (m *EthLog) XXX_Size() int {
	return m.Size()
}
func (m *EthLog) XXX_DiscardUnknown() {
	xxx_messageInfo_EthLog.DiscardUnknown(m)
}

var xxx_messageInfo_EthLog proto.InternalMessageInfo

func (m *EthLog) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EthLog) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *EthLog) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EthLog) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *EthLog) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *EthLog) GetTxIndex() uint64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *EthLog) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *EthLog) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EthLog) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func init() {
	proto.RegisterType((*PrepareTxRequest)(nil), "ethermint.sgx.v1.PrepareTxRequest")
	proto.RegisterType((*PrepareTxResponse)(nil), "ethermint.sgx.v1.PrepareTxResponse")
	proto.RegisterType((*CreateRequest)(nil), "ethermint.sgx.v1.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "ethermint.sgx.v1.CreateResponse")
	proto.RegisterType((*CallRequest)(nil), "ethermint.sgx.v1.CallRequest")
	proto.RegisterType((*CallResponse)(nil), "ethermint.sgx.v1.CallResponse")
	proto.RegisterType((*CommitRequest)(nil), "ethermint.sgx.v1.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "ethermint.sgx.v1.CommitResponse")
	proto.RegisterType((*StateDBAddBalanceRequest)(nil), "ethermint.sgx.v1.StateDBAddBalanceRequest")
	proto.RegisterType((*StateDBAddBalanceResponse)(nil), "ethermint.sgx.v1.StateDBAddBalanceResponse")
	proto.RegisterType((*StateDBSubBalanceRequest)(nil), "ethermint.sgx.v1.StateDBSubBalanceRequest")
	proto.RegisterType((*StateDBSubBalanceResponse)(nil), "ethermint.sgx.v1.StateDBSubBalanceResponse")
	proto.RegisterType((*StateDBSetNonceRequest)(nil), "ethermint.sgx.v1.StateDBSetNonceRequest")
	proto.RegisterType((*StateDBSetNonceResponse)(nil), "ethermint.sgx.v1.StateDBSetNonceResponse")
	proto.RegisterType((*StateDBIncreaseNonceRequest)(nil), "ethermint.sgx.v1.StateDBIncreaseNonceRequest")
	proto.RegisterType((*StateDBIncreaseNonceResponse)(nil), "ethermint.sgx.v1.StateDBIncreaseNonceResponse")
	proto.RegisterType((*Rules)(nil), "ethermint.sgx.v1.Rules")
	proto.RegisterType((*AccessTuple)(nil), "ethermint.sgx.v1.AccessTuple")
	proto.RegisterType((*StateDBPrepareRequest)(nil), "ethermint.sgx.v1.StateDBPrepareRequest")
	proto.RegisterType((*StateDBPrepareResponse)(nil), "ethermint.sgx.v1.StateDBPrepareResponse")
	proto.RegisterType((*StateDBGetRefundRequest)(nil), "ethermint.sgx.v1.StateDBGetRefundRequest")
	proto.RegisterType((*StateDBGetRefundResponse)(nil), "ethermint.sgx.v1.StateDBGetRefundResponse")
	proto.RegisterType((*StateDBGetLogsRequest)(nil), "ethermint.sgx.v1.StateDBGetLogsRequest")
	proto.RegisterType((*StateDBGetLogsResponse)(nil), "ethermint.sgx.v1.StateDBGetLogsResponse")
	proto.RegisterType((*Message)(nil), "ethermint.sgx.v1.Message")
	proto.RegisterType((*PrepareTxEVMConfig)(nil), "ethermint.sgx.v1.PrepareTxEVMConfig")
	proto.RegisterType((*ChainConfig)(nil), "ethermint.sgx.v1.ChainConfig")
	proto.RegisterType((*EthashConfig)(nil), "ethermint.sgx.v1.EthashConfig")
	proto.RegisterType((*CliqueConfig)(nil), "ethermint.sgx.v1.CliqueConfig")
	proto.RegisterType((*TxConfig)(nil), "ethermint.sgx.v1.TxConfig")
	proto.RegisterType((*EthLog)(nil), "ethermint.sgx.v1.EthLog")
}

func init() { proto.RegisterFile("ethermint/sgx/v1/query.proto", fileDescriptor_1d9fb6e76534f03e) }

var fileDescriptor_1d9fb6e76534f03e = []byte{
	// 2200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4d, 0x6f, 0x1b, 0xc9,
	0xd1, 0x16, 0xf5, 0x41, 0x91, 0x45, 0x8a, 0xa2, 0xda, 0x5a, 0x79, 0x44, 0xdb, 0xb2, 0x76, 0xbc,
	0xbb, 0xd6, 0x7a, 0xf7, 0xa5, 0x2c, 0xbf, 0x90, 0x61, 0x04, 0x49, 0x10, 0x8b, 0xb2, 0x65, 0x6d,
	0x6c, 0xaf, 0x42, 0x0b, 0x3e, 0xe4, 0x32, 0x68, 0xce, 0xb4, 0x86, 0x1d, 0xcd, 0x4c, 0x8f, 0xa7,
	0x7b, 0xb8, 0xd4, 0x1e, 0x03, 0xe4, 0x9e, 0x53, 0xfe, 0x42, 0xfe, 0x46, 0x8e, 0x0b, 0xe4, 0xb2,
	0x08, 0x72, 0xc8, 0x29, 0x08, 0xec, 0xbf, 0x90, 0x6b, 0x80, 0xa0, 0x3f, 0x66, 0x38, 0x14, 0x49,
	0x45, 0x80, 0x83, 0x5c, 0x88, 0xa9, 0x7a, 0x9e, 0xee, 0xea, 0x6a, 0x76, 0x57, 0x55, 0x17, 0xdc,
	0x26, 0xa2, 0x4f, 0x92, 0x90, 0x46, 0x62, 0x97, 0xfb, 0xc3, 0xdd, 0xc1, 0xde, 0xee, 0xbb, 0x94,
	0x24, 0x17, 0xed, 0x38, 0x61, 0x82, 0xa1, 0x66, 0x8e, 0xb6, 0xb9, 0x3f, 0x6c, 0x0f, 0xf6, 0x5a,
	0xb7, 0x05, 0x89, 0x3c, 0x33, 0x40, 0x5c, 0xc4, 0x84, 0xeb, 0x5f, 0xcd, 0x6f, 0xad, 0xfb, 0xcc,
	0x67, 0xea, 0x73, 0x57, 0x7e, 0x69, 0xad, 0xfd, 0xa7, 0x12, 0x34, 0x4f, 0x12, 0x12, 0xe3, 0x84,
	0x9c, 0x0e, 0xbb, 0xe4, 0x5d, 0x4a, 0xb8, 0x40, 0x37, 0x61, 0x59, 0x0c, 0x9d, 0x3e, 0xe6, 0x7d,
	0xab, 0xb4, 0x5d, 0xda, 0xa9, 0x77, 0xcb, 0x62, 0xf8, 0x02, 0xf3, 0x3e, 0x7a, 0x0c, 0xe5, 0x3e,
	0xc1, 0x1e, 0x49, 0xac, 0xf9, 0xed, 0xd2, 0x4e, 0xed, 0x91, 0xd5, 0x1e, 0x99, 0x6c, 0x6b, 0x63,
	0x2f, 0x14, 0x7e, 0xb0, 0xf8, 0xc3, 0xdf, 0xef, 0xce, 0x75, 0x0d, 0x1b, 0x35, 0x61, 0x21, 0xe4,
	0xbe, 0xb5, 0xa0, 0x26, 0x93, 0x9f, 0xe8, 0x18, 0x80, 0x0c, 0x42, 0xc7, 0x65, 0xd1, 0x19, 0xf5,
	0xad, 0x45, 0x35, 0xdb, 0x67, 0xed, 0xcb, 0x2e, 0xb5, 0xf3, 0xa5, 0x3d, 0x7b, 0xfb, 0xaa, 0xa3,
	0xb8, 0x66, 0xe6, 0x2a, 0x19, 0x84, 0x5a, 0x61, 0x3f, 0x82, 0xb5, 0x82, 0x07, 0x3c, 0x66, 0x11,
	0x27, 0xe8, 0x0e, 0x40, 0x1f, 0x47, 0x5e, 0x40, 0x12, 0x87, 0x7a, 0xca, 0x8b, 0xc5, 0x6e, 0xd5,
	0x68, 0x8e, 0x3d, 0xfb, 0xb7, 0x25, 0x58, 0xe9, 0x24, 0x04, 0x0b, 0x92, 0xf9, 0x7c, 0xf5, 0x00,
	0xb4, 0x01, 0x65, 0x17, 0x07, 0x81, 0xf1, 0xbc, 0xde, 0x35, 0x12, 0x42, 0xb0, 0xe8, 0x32, 0x8f,
	0x18, 0xd7, 0xd4, 0xb7, 0xf4, 0xd6, 0xc7, 0x5c, 0x39, 0xb5, 0xd8, 0x95, 0x9f, 0x68, 0x1d, 0x96,
	0x06, 0x38, 0x48, 0x89, 0xb5, 0xa4, 0x74, 0x5a, 0xb0, 0xcf, 0xa1, 0x91, 0xad, 0xc1, 0xac, 0xba,
	0x09, 0x0b, 0x09, 0x11, 0x66, 0xd3, 0xe5, 0x27, 0xba, 0x07, 0x2b, 0x2e, 0x8b, 0x44, 0x82, 0x5d,
	0xe1, 0x60, 0xcf, 0xcb, 0xcc, 0xd7, 0x33, 0xe5, 0x53, 0xcf, 0x4b, 0x90, 0x0d, 0x2b, 0x01, 0x39,
	0x13, 0x0e, 0x1b, 0x90, 0xc4, 0x91, 0xa6, 0x17, 0x94, 0x99, 0x9a, 0x54, 0x7e, 0x3b, 0x20, 0xc9,
	0x11, 0xe6, 0xf6, 0x1f, 0x4a, 0x50, 0xeb, 0xe0, 0x20, 0xf8, 0x78, 0x7f, 0xd5, 0x32, 0x8c, 0xbf,
	0xf2, 0x5b, 0x7a, 0x47, 0xa3, 0x38, 0x15, 0xca, 0xe3, 0x7a, 0x57, 0x0b, 0xd9, 0x2e, 0x2c, 0x4d,
	0xd9, 0x85, 0x72, 0x71, 0x17, 0x0e, 0xa1, 0xae, 0xd7, 0x35, 0x73, 0x0f, 0x26, 0xdc, 0x9b, 0x9f,
	0x74, 0xaf, 0x0d, 0x2b, 0x1d, 0x16, 0x86, 0x54, 0x5c, 0xcf, 0x3f, 0xbb, 0x09, 0x8d, 0x8c, 0xaf,
	0xed, 0xda, 0x14, 0xac, 0x37, 0x02, 0x0b, 0x72, 0x78, 0xf0, 0xd4, 0xf3, 0x0e, 0x70, 0x80, 0x23,
	0xf7, 0x63, 0x0f, 0xc7, 0x06, 0x94, 0x71, 0xc8, 0xd2, 0x48, 0x98, 0x3f, 0xc4, 0x48, 0xf6, 0x2d,
	0xd8, 0x9c, 0x62, 0x6a, 0x62, 0x1d, 0x6f, 0xd2, 0xde, 0xff, 0x6a, 0x1d, 0x45, 0x53, 0x66, 0x1d,
	0x04, 0x36, 0x32, 0x90, 0x88, 0xd7, 0xec, 0xe3, 0x57, 0xb1, 0x0e, 0x4b, 0x91, 0x9c, 0xc6, 0x2c,
	0x42, 0x0b, 0xf6, 0x26, 0xdc, 0x9c, 0x30, 0x63, 0x56, 0x70, 0x0a, 0xb7, 0x0c, 0x74, 0x1c, 0xb9,
	0x09, 0xc1, 0x9c, 0xfc, 0x17, 0x96, 0x61, 0x6f, 0xc1, 0xed, 0xe9, 0xb3, 0x1a, 0xab, 0xbf, 0x5b,
	0x84, 0xa5, 0x6e, 0x1a, 0x10, 0x8e, 0x36, 0xa1, 0xe2, 0xf6, 0x31, 0x8d, 0x46, 0xd3, 0x2f, 0x2b,
	0xf9, 0xd8, 0x43, 0x9f, 0x42, 0x9d, 0x72, 0xa7, 0xcf, 0x42, 0xc2, 0x05, 0xc1, 0x9e, 0x32, 0x51,
	0xe9, 0xd6, 0x28, 0x7f, 0x91, 0xa9, 0xd0, 0x1d, 0xa8, 0x51, 0xee, 0x10, 0x87, 0x3a, 0xf1, 0xde,
	0xfe, 0x43, 0xe5, 0x74, 0xa5, 0x5b, 0xa1, 0xfc, 0xd9, 0xf1, 0xc9, 0xde, 0xfe, 0xc3, 0x71, 0x78,
	0x5f, 0x5d, 0x9d, 0x11, 0xbc, 0x3f, 0x0e, 0x3f, 0x51, 0xb7, 0x68, 0x04, 0x3f, 0x31, 0xf6, 0x7b,
	0x17, 0xdf, 0xe3, 0x48, 0xd0, 0x34, 0x54, 0x37, 0x4a, 0xd9, 0x3f, 0xc8, 0x54, 0xe8, 0x2b, 0x58,
	0xa3, 0x5c, 0x06, 0x58, 0x2e, 0xa4, 0x26, 0x62, 0x71, 0x40, 0xac, 0x65, 0xc5, 0x6b, 0x52, 0xde,
	0x19, 0xd3, 0xcb, 0x30, 0x43, 0xb9, 0x13, 0x13, 0x41, 0x12, 0xde, 0x4b, 0x13, 0xdf, 0xaa, 0x28,
	0x62, 0x9d, 0xf2, 0x93, 0x5c, 0x87, 0xee, 0xaa, 0x35, 0x51, 0x39, 0xae, 0x97, 0x06, 0x56, 0x55,
	0x51, 0x80, 0xf2, 0x63, 0xa3, 0x41, 0xb7, 0xa0, 0x2a, 0x57, 0x45, 0x92, 0x80, 0x46, 0x16, 0x64,
	0x4b, 0x3e, 0x50, 0xb2, 0x01, 0x03, 0x16, 0x79, 0x2c, 0xb2, 0x6a, 0x19, 0xf8, 0x52, 0xc9, 0x72,
	0xab, 0x29, 0x77, 0x42, 0x92, 0xf8, 0xc4, 0xaa, 0x2b, 0x6c, 0x99, 0xf2, 0x57, 0x52, 0x34, 0x56,
	0x79, 0x1f, 0x47, 0x7e, 0x1f, 0x53, 0x6b, 0x25, 0xb3, 0xfa, 0xc6, 0x68, 0xcc, 0xc4, 0x2e, 0x8e,
	0xdc, 0x34, 0xb2, 0x1a, 0xd9, 0xc4, 0x1d, 0x25, 0x1b, 0x30, 0x4e, 0xb0, 0x9f, 0x12, 0x6b, 0x35,
	0x03, 0x4f, 0x94, 0x6c, 0xc0, 0x01, 0x49, 0xce, 0x03, 0x62, 0x35, 0x33, 0xf0, 0xad, 0x92, 0xed,
	0x6f, 0xa0, 0xf6, 0xd4, 0x75, 0x09, 0xe7, 0xa7, 0xa9, 0xdc, 0x21, 0x0b, 0x96, 0x65, 0xb0, 0x23,
	0x9c, 0x9b, 0xd0, 0x94, 0x89, 0xf2, 0xbf, 0xe0, 0x82, 0x25, 0xd8, 0x27, 0xce, 0x39, 0xb9, 0x90,
	0xd1, 0x69, 0x61, 0xa7, 0xde, 0xad, 0x19, 0xdd, 0x2f, 0xc9, 0x05, 0xb7, 0xff, 0x5a, 0x82, 0x4f,
	0xcc, 0xa1, 0x33, 0xa9, 0xea, 0xfa, 0x87, 0x98, 0xab, 0x0c, 0x9b, 0x1d, 0x62, 0x2d, 0xa1, 0x16,
	0x54, 0x5c, 0x46, 0xa3, 0x1e, 0xe6, 0x59, 0xea, 0xc9, 0x65, 0x19, 0xa2, 0x3d, 0xc2, 0xb3, 0x68,
	0xac, 0xbe, 0xe5, 0xdd, 0x4b, 0xe4, 0x99, 0x56, 0x07, 0xa9, 0xde, 0xd5, 0x02, 0xfa, 0x39, 0xd4,
	0xb0, 0x72, 0xd1, 0x09, 0x28, 0x17, 0x56, 0x79, 0x7b, 0x61, 0xa7, 0xf6, 0xe8, 0xce, 0x64, 0x16,
	0x2e, 0xec, 0x43, 0x17, 0xf4, 0x88, 0x97, 0x94, 0x0b, 0xdb, 0xca, 0x43, 0x44, 0xee, 0x95, 0xb9,
	0x44, 0x4f, 0xf2, 0x5b, 0x7d, 0x44, 0x44, 0x97, 0x9c, 0xa5, 0x91, 0x77, 0xcd, 0xc0, 0xfc, 0x28,
	0x0f, 0x7f, 0x85, 0x91, 0x26, 0x35, 0x6c, 0x40, 0x39, 0x51, 0x1a, 0x33, 0xcc, 0x48, 0xf6, 0xe3,
	0x7c, 0x77, 0x8f, 0x88, 0x78, 0xc9, 0x7c, 0x7e, 0x4d, 0x5b, 0x87, 0xf9, 0xfa, 0xf3, 0x71, 0xc6,
	0xd2, 0x03, 0x58, 0x08, 0x98, 0x6f, 0x95, 0xd4, 0x8e, 0x58, 0x93, 0x3b, 0xf2, 0x4c, 0xf4, 0x5f,
	0x32, 0xbf, 0x2b, 0x49, 0xf6, 0x1f, 0x17, 0x60, 0xf9, 0x15, 0xe1, 0x1c, 0xfb, 0x04, 0x35, 0x60,
	0x5e, 0x30, 0x73, 0x40, 0xe6, 0x05, 0x93, 0xff, 0xc5, 0x59, 0xc2, 0x42, 0xf3, 0xef, 0xa9, 0xef,
	0xe9, 0x71, 0x70, 0x94, 0x1c, 0x17, 0x0b, 0xc9, 0x51, 0x9e, 0x50, 0x1f, 0xcb, 0xbf, 0x27, 0xa4,
	0xc2, 0xa4, 0xd2, 0x8a, 0x8f, 0xf9, 0x4b, 0x29, 0x67, 0x60, 0x9c, 0x50, 0x37, 0xcb, 0xa9, 0x12,
	0x3c, 0x91, 0x32, 0xda, 0x82, 0x9a, 0x04, 0xcf, 0x08, 0x71, 0x5c, 0x1c, 0xab, 0x8b, 0xbf, 0xd8,
	0x95, 0xfc, 0xe7, 0x84, 0x74, 0x70, 0x9c, 0xe1, 0x82, 0xc6, 0x0a, 0xaf, 0xe4, 0xf8, 0x29, 0x8d,
	0x25, 0x2e, 0x4f, 0x11, 0x16, 0x58, 0xdd, 0x72, 0x79, 0x8a, 0xb0, 0xc0, 0xe8, 0x70, 0xfc, 0xbc,
	0xc0, 0x35, 0xce, 0x8b, 0x29, 0xd7, 0x0a, 0xa7, 0x06, 0xdd, 0x87, 0x66, 0x2f, 0x60, 0x3d, 0xa7,
	0xb8, 0xbc, 0x9a, 0x32, 0xbf, 0x22, 0xf5, 0x47, 0xf9, 0x12, 0xef, 0x42, 0x4d, 0x11, 0x65, 0x21,
	0x4a, 0xb8, 0x55, 0x57, 0xf7, 0x0a, 0xa4, 0xea, 0x85, 0xd2, 0xa0, 0x36, 0xdc, 0xe0, 0xe7, 0x34,
	0x76, 0xb0, 0xeb, 0xca, 0x7c, 0xe6, 0xb8, 0x7d, 0xe2, 0x9e, 0x73, 0x13, 0x22, 0xd6, 0x24, 0xf4,
	0x54, 0x23, 0x1d, 0x05, 0xd8, 0x7f, 0x99, 0x07, 0x34, 0x59, 0x51, 0xa2, 0x07, 0xb0, 0xa6, 0xe3,
	0xbc, 0xae, 0x46, 0x9d, 0xdf, 0x70, 0x16, 0x99, 0xff, 0x70, 0x55, 0x01, 0x9a, 0xf7, 0x0d, 0x67,
	0x2a, 0x9e, 0xc8, 0x8b, 0xe6, 0xa8, 0x9b, 0x37, 0x3f, 0xba, 0x79, 0x07, 0xf2, 0xe6, 0x6d, 0x42,
	0x45, 0xea, 0xa5, 0x57, 0xe6, 0xcf, 0x5d, 0x96, 0xf2, 0x73, 0x42, 0xd0, 0xcf, 0xa0, 0x2a, 0x86,
	0xe3, 0xe5, 0x6e, 0x6b, 0x72, 0xe3, 0x4e, 0x87, 0x63, 0x45, 0x6e, 0x45, 0x18, 0x59, 0x6e, 0x85,
	0x47, 0x7a, 0xa9, 0xef, 0xc8, 0xa2, 0x8f, 0x98, 0x74, 0x00, 0x4a, 0x75, 0x2a, 0x35, 0xf2, 0xef,
	0x8c, 0x98, 0x93, 0x5b, 0xd7, 0xf9, 0xa0, 0x1a, 0xb1, 0x03, 0x63, 0xff, 0x16, 0xc8, 0x8a, 0xd9,
	0xf1, 0x48, 0xc4, 0x42, 0x75, 0x18, 0xaa, 0xdd, 0x0a, 0x19, 0x84, 0x87, 0x52, 0x96, 0xd7, 0x84,
	0x0c, 0x45, 0x82, 0x1d, 0x42, 0x63, 0x6e, 0x55, 0xb6, 0x17, 0x76, 0x16, 0xba, 0x55, 0xa5, 0x79,
	0x46, 0x63, 0x8e, 0x6e, 0x43, 0x55, 0x96, 0x5e, 0x09, 0xf5, 0x08, 0x37, 0xe7, 0x61, 0xa4, 0xb0,
	0xff, 0x55, 0x81, 0x5a, 0x67, 0xb4, 0x4b, 0xa8, 0x05, 0x55, 0x93, 0x35, 0x9d, 0x4b, 0x69, 0xf3,
	0x10, 0xdd, 0x87, 0xd5, 0x3c, 0x67, 0x3a, 0xbd, 0x80, 0xb9, 0xe7, 0xa6, 0x96, 0x6b, 0xe4, 0xea,
	0x03, 0xa9, 0x45, 0x5f, 0x40, 0xd3, 0x73, 0xb0, 0xc3, 0x9c, 0x33, 0x96, 0x9c, 0x1b, 0xa6, 0xde,
	0xd1, 0xba, 0xf7, 0xf4, 0xdb, 0xe7, 0x2c, 0x39, 0xd7, 0xbc, 0x07, 0x80, 0x0a, 0x3c, 0x9e, 0xc6,
	0x31, 0x4b, 0x84, 0x49, 0xa6, 0x0d, 0xc3, 0x7c, 0xa3, 0xb5, 0xe8, 0x33, 0x58, 0x55, 0xf9, 0xd4,
	0xd9, 0xdb, 0x7f, 0x68, 0xa6, 0xd4, 0x37, 0xaa, 0x46, 0x54, 0x4a, 0xd6, 0x33, 0xde, 0x83, 0x46,
	0x96, 0x94, 0x0d, 0xa9, 0x5c, 0x20, 0xed, 0x5f, 0x26, 0x3d, 0x31, 0xa4, 0xe5, 0x02, 0xe9, 0x89,
	0x26, 0xdd, 0x87, 0xd5, 0x3c, 0x41, 0x1b, 0x96, 0xbe, 0x65, 0x8d, 0x5c, 0xad, 0x89, 0x7b, 0xb0,
	0x3e, 0x9e, 0xa6, 0x0d, 0xbb, 0xaa, 0xd8, 0x37, 0xc6, 0x31, 0x3d, 0xe4, 0x4b, 0x68, 0x8e, 0x92,
	0xb5, 0xa1, 0x83, 0xa2, 0xaf, 0x8e, 0xf4, 0x9a, 0xfa, 0x39, 0x34, 0xb2, 0x94, 0x6d, 0x88, 0xe6,
	0xb2, 0x65, 0x5a, 0x4d, 0xfb, 0x1a, 0x50, 0x98, 0xd2, 0xc4, 0xf1, 0x03, 0xec, 0x52, 0x92, 0x18,
	0x6a, 0x5d, 0x51, 0x9b, 0x12, 0x39, 0xd2, 0x80, 0x66, 0x7f, 0x0a, 0x75, 0x9d, 0xe6, 0x0d, 0x6f,
	0x45, 0xbb, 0xaf, 0x75, 0x39, 0x45, 0x27, 0x7b, 0x43, 0x69, 0x98, 0xa2, 0x5d, 0xe9, 0x34, 0xa5,
	0x0d, 0x37, 0x70, 0x92, 0xb0, 0xef, 0x2e, 0x19, 0x5d, 0x55, 0xcc, 0x35, 0x05, 0x8d, 0x59, 0xfd,
	0x1a, 0x90, 0x9f, 0xe0, 0x8b, 0x4b, 0xf4, 0xa6, 0x5e, 0xa3, 0x44, 0xc6, 0xd8, 0x0f, 0x61, 0x5d,
	0x15, 0x14, 0x4e, 0x44, 0x04, 0x8f, 0x03, 0x2a, 0x0c, 0x7f, 0x4d, 0xf1, 0x91, 0xc2, 0x5e, 0x1b,
	0x28, 0xdb, 0xd5, 0x95, 0xac, 0xce, 0x70, 0x04, 0x0d, 0x89, 0x85, 0x24, 0x55, 0x5d, 0xc6, 0x52,
	0xb7, 0x9e, 0x41, 0xa7, 0x34, 0x24, 0xe8, 0x73, 0xa8, 0xe9, 0x8a, 0x43, 0x13, 0x6f, 0x14, 0x88,
	0xa0, 0x81, 0x8c, 0xa6, 0x6b, 0x0f, 0x4d, 0x5b, 0x2f, 0xd2, 0x34, 0x90, 0xd1, 0x74, 0x15, 0xa2,
	0x69, 0x9f, 0x14, 0x69, 0x1a, 0x50, 0xb4, 0x9f, 0xc0, 0xa6, 0x50, 0x01, 0x03, 0x07, 0x8e, 0x60,
	0x02, 0x07, 0x8e, 0x47, 0xcf, 0xce, 0xa8, 0x9b, 0x06, 0xe2, 0xc2, 0xda, 0x50, 0x6e, 0xdd, 0xcc,
	0x08, 0xa7, 0x12, 0x3f, 0xcc, 0x61, 0x74, 0x04, 0xdb, 0x33, 0xc7, 0x3a, 0x31, 0xe6, 0x9c, 0x78,
	0xd6, 0x4d, 0x75, 0x6f, 0xee, 0xcc, 0x98, 0xe2, 0x44, 0x91, 0xd0, 0x63, 0x28, 0x13, 0xa1, 0x7a,
	0x03, 0x96, 0x0a, 0x63, 0x5b, 0x53, 0xb3, 0x23, 0xe6, 0x7d, 0x1d, 0x0f, 0xba, 0x86, 0x2d, 0xc7,
	0xb9, 0x01, 0x7d, 0x97, 0x12, 0x6b, 0x73, 0xd6, 0xb8, 0x8e, 0xc2, 0xb3, 0x71, 0x9a, 0x2d, 0x23,
	0x1b, 0xe5, 0x8e, 0x47, 0x06, 0x4e, 0x28, 0x1f, 0xda, 0x2d, 0x1d, 0xd9, 0x28, 0x3f, 0x24, 0x83,
	0x57, 0xcc, 0x23, 0x76, 0x03, 0xea, 0x45, 0x7b, 0xf6, 0x4f, 0xa1, 0x5e, 0x9c, 0x47, 0x16, 0x0d,
	0x27, 0x24, 0xa1, 0x2c, 0x2f, 0x1a, 0xb4, 0x24, 0x13, 0xee, 0xb3, 0x98, 0xb9, 0x7d, 0x13, 0x81,
	0xb4, 0x60, 0x7f, 0x0f, 0x95, 0x2c, 0x08, 0xcb, 0xb0, 0xa8, 0x4e, 0x4c, 0xb1, 0x13, 0x52, 0x55,
	0x1a, 0xd5, 0x0c, 0x29, 0x74, 0x49, 0xe6, 0xc7, 0xba, 0x24, 0x9b, 0x50, 0x11, 0x43, 0x87, 0x46,
	0x1e, 0x19, 0x66, 0x69, 0x40, 0x0c, 0x8f, 0xa5, 0x28, 0xc3, 0x70, 0xc0, 0x7c, 0x83, 0xe9, 0x4c,
	0x5f, 0x09, 0x98, 0xaf, 0x40, 0xfb, 0x9f, 0x25, 0x28, 0xeb, 0xc2, 0xe2, 0x8a, 0x6a, 0x73, 0x03,
	0xca, 0x82, 0xc5, 0xd4, 0xcd, 0xea, 0x4c, 0x23, 0xe5, 0xf9, 0x7a, 0xa1, 0x90, 0xaf, 0xe5, 0x2d,
	0x55, 0x0e, 0x44, 0x69, 0xd8, 0x23, 0x89, 0x31, 0x58, 0x53, 0xba, 0xd7, 0x4a, 0x55, 0x74, 0x62,
	0x69, 0xa6, 0x13, 0xe5, 0x71, 0x27, 0xc6, 0xf7, 0x65, 0xf9, 0xf2, 0xbe, 0xa8, 0x76, 0x80, 0x1c,
	0xa6, 0xa3, 0x9d, 0x16, 0xa4, 0x47, 0x09, 0x09, 0xd9, 0x80, 0x78, 0xe6, 0xe1, 0x90, 0x89, 0x8f,
	0xfe, 0x5c, 0x81, 0xfa, 0xaf, 0x52, 0x92, 0x5c, 0xbc, 0x21, 0xc9, 0x40, 0x96, 0x2e, 0x6f, 0xa1,
	0x9a, 0x67, 0x69, 0x64, 0x5f, 0xd1, 0x14, 0x32, 0x65, 0x5e, 0xeb, 0xde, 0x95, 0x1c, 0x53, 0x92,
	0xce, 0xa1, 0x57, 0x50, 0xd6, 0xfd, 0x16, 0x74, 0x77, 0xca, 0xd9, 0x2b, 0x76, 0x83, 0x5a, 0xdb,
	0xb3, 0x09, 0xf9, 0x74, 0x47, 0xb0, 0xd8, 0xc1, 0x41, 0x80, 0xa6, 0x14, 0x40, 0x85, 0x46, 0x4b,
	0x6b, 0x6b, 0x16, 0x3c, 0xb6, 0x2e, 0xd5, 0x8b, 0x98, 0xba, 0xae, 0x62, 0x57, 0x63, 0xea, 0xba,
	0xc6, 0xdb, 0x18, 0x73, 0x28, 0x82, 0xb5, 0x89, 0xee, 0x02, 0x7a, 0x30, 0x39, 0x70, 0x56, 0xb7,
	0xa3, 0xf5, 0xd5, 0xb5, 0xb8, 0x53, 0xec, 0x8d, 0xba, 0x08, 0x57, 0xd8, 0x9b, 0xe8, 0x6a, 0x5c,
	0x61, 0x6f, 0x4a, 0x5b, 0x62, 0x0e, 0xf5, 0x61, 0xf5, 0x52, 0xc7, 0x00, 0xed, 0xcc, 0x9e, 0x61,
	0xbc, 0x77, 0xd1, 0xfa, 0xf2, 0x1a, 0xcc, 0xdc, 0xd2, 0x77, 0xb0, 0x3e, 0xad, 0x55, 0x80, 0xfe,
	0x6f, 0xe6, 0x24, 0xd3, 0x1a, 0x15, 0xad, 0xf6, 0x75, 0xe9, 0xb9, 0x61, 0x02, 0x8d, 0xf1, 0x87,
	0x15, 0xba, 0x3f, 0x73, 0x8e, 0xf1, 0x07, 0x65, 0x6b, 0xe7, 0x3f, 0x13, 0x73, 0x33, 0xe7, 0xd0,
	0xbc, 0xfc, 0xd6, 0x42, 0xb3, 0x37, 0xe8, 0xf2, 0x4b, 0xae, 0xf5, 0xe0, 0x3a, 0xd4, 0x29, 0x3e,
	0x99, 0xc7, 0xd6, 0x15, 0x3e, 0x8d, 0x3f, 0xe3, 0xae, 0xf0, 0xe9, 0xd2, 0xbb, 0xcd, 0x9e, 0x3b,
	0xf8, 0xc5, 0x0f, 0xef, 0xb7, 0x4a, 0x3f, 0xbe, 0xdf, 0x2a, 0xfd, 0xe3, 0xfd, 0x56, 0xe9, 0xf7,
	0x1f, 0xb6, 0xe6, 0x7e, 0xfc, 0xb0, 0x35, 0xf7, 0xb7, 0x0f, 0x5b, 0x73, 0xbf, 0xfe, 0xc2, 0xa7,
	0xa2, 0x9f, 0xf6, 0xda, 0x2e, 0x0b, 0x77, 0xc9, 0x20, 0x64, 0x7c, 0x77, 0xd4, 0x5f, 0x1f, 0xaa,
	0x0e, 0xbb, 0xea, 0x60, 0xf7, 0xca, 0xaa, 0x33, 0xfe, 0xff, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x66, 0xcf, 0xc6, 0xb1, 0x7f, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// func (s *SgxRpcServer) PrepareTx(args *keeper.PrepareTxArgs, reply *keeper.PrepareTxReply) error {
	PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error)
	// func (s *SgxRpcServer) Create(args *keeper.CreateArgs, reply *keeper.CreateReply) error {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// func (s *SgxRpcServer) Call(args *keeper.CallArgs, reply *keeper.CallReply) error {
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// func (s *SgxRpcServer) Commit(args *keeper.CommitArgs, reply *keeper.CommitReply) error {
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// func (s *SgxRpcServer) StateDBAddBalance(args *keeper.StateDBAddBalanceArgs, reply *keeper.StateDBAddBalanceReply) error {
	StateDBAddBalance(ctx context.Context, in *StateDBAddBalanceRequest, opts ...grpc.CallOption) (*StateDBAddBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSubBalance(args *keeper.StateDBSubBalanceArgs, reply *keeper.StateDBSubBalanceReply) error {
	StateDBSubBalance(ctx context.Context, in *StateDBSubBalanceRequest, opts ...grpc.CallOption) (*StateDBSubBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSetNonce(args *keeper.StateDBSetNonceArgs, reply *keeper.StateDBSetNonceReply) error {
	StateDBSetNonce(ctx context.Context, in *StateDBSetNonceRequest, opts ...grpc.CallOption) (*StateDBSetNonceResponse, error)
	// func (s *SgxRpcServer) StateDBIncreaseNonce(args *keeper.StateDBIncreaseNonceArgs, reply *keeper.StateDBIncreaseNonceReply) error {
	StateDBIncreaseNonce(ctx context.Context, in *StateDBIncreaseNonceRequest, opts ...grpc.CallOption) (*StateDBIncreaseNonceResponse, error)
	// func (s *SgxRpcServer) StateDBPrepare(args *keeper.StateDBPrepareArgs, reply *keeper.StateDBPrepareReply) error {
	StateDBPrepare(ctx context.Context, in *StateDBPrepareRequest, opts ...grpc.CallOption) (*StateDBPrepareResponse, error)
	// func (s *SgxRpcServer) StateDBGetRefund(args *keeper.StateDBGetRefundArgs, reply *keeper.StateDBGetRefundReply) error {
	StateDBGetRefund(ctx context.Context, in *StateDBGetRefundRequest, opts ...grpc.CallOption) (*StateDBGetRefundResponse, error)
	// func (s *SgxRpcServer) StateDBGetLogs(args *keeper.StateDBGetLogsArgs, reply *keeper.StateDBGetLogsReply) error {
	StateDBGetLogs(ctx context.Context, in *StateDBGetLogsRequest, opts ...grpc.CallOption) (*StateDBGetLogsResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error) {
	out := new(PrepareTxResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/PrepareTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBAddBalance(ctx context.Context, in *StateDBAddBalanceRequest, opts ...grpc.CallOption) (*StateDBAddBalanceResponse, error) {
	out := new(StateDBAddBalanceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBAddBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBSubBalance(ctx context.Context, in *StateDBSubBalanceRequest, opts ...grpc.CallOption) (*StateDBSubBalanceResponse, error) {
	out := new(StateDBSubBalanceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBSubBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBSetNonce(ctx context.Context, in *StateDBSetNonceRequest, opts ...grpc.CallOption) (*StateDBSetNonceResponse, error) {
	out := new(StateDBSetNonceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBSetNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBIncreaseNonce(ctx context.Context, in *StateDBIncreaseNonceRequest, opts ...grpc.CallOption) (*StateDBIncreaseNonceResponse, error) {
	out := new(StateDBIncreaseNonceResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBIncreaseNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBPrepare(ctx context.Context, in *StateDBPrepareRequest, opts ...grpc.CallOption) (*StateDBPrepareResponse, error) {
	out := new(StateDBPrepareResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBGetRefund(ctx context.Context, in *StateDBGetRefundRequest, opts ...grpc.CallOption) (*StateDBGetRefundResponse, error) {
	out := new(StateDBGetRefundResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBGetRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StateDBGetLogs(ctx context.Context, in *StateDBGetLogsRequest, opts ...grpc.CallOption) (*StateDBGetLogsResponse, error) {
	out := new(StateDBGetLogsResponse)
	err := c.cc.Invoke(ctx, "/ethermint.sgx.v1.QueryService/StateDBGetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// func (s *SgxRpcServer) PrepareTx(args *keeper.PrepareTxArgs, reply *keeper.PrepareTxReply) error {
	PrepareTx(context.Context, *PrepareTxRequest) (*PrepareTxResponse, error)
	// func (s *SgxRpcServer) Create(args *keeper.CreateArgs, reply *keeper.CreateReply) error {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// func (s *SgxRpcServer) Call(args *keeper.CallArgs, reply *keeper.CallReply) error {
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// func (s *SgxRpcServer) Commit(args *keeper.CommitArgs, reply *keeper.CommitReply) error {
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// func (s *SgxRpcServer) StateDBAddBalance(args *keeper.StateDBAddBalanceArgs, reply *keeper.StateDBAddBalanceReply) error {
	StateDBAddBalance(context.Context, *StateDBAddBalanceRequest) (*StateDBAddBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSubBalance(args *keeper.StateDBSubBalanceArgs, reply *keeper.StateDBSubBalanceReply) error {
	StateDBSubBalance(context.Context, *StateDBSubBalanceRequest) (*StateDBSubBalanceResponse, error)
	// func (s *SgxRpcServer) StateDBSetNonce(args *keeper.StateDBSetNonceArgs, reply *keeper.StateDBSetNonceReply) error {
	StateDBSetNonce(context.Context, *StateDBSetNonceRequest) (*StateDBSetNonceResponse, error)
	// func (s *SgxRpcServer) StateDBIncreaseNonce(args *keeper.StateDBIncreaseNonceArgs, reply *keeper.StateDBIncreaseNonceReply) error {
	StateDBIncreaseNonce(context.Context, *StateDBIncreaseNonceRequest) (*StateDBIncreaseNonceResponse, error)
	// func (s *SgxRpcServer) StateDBPrepare(args *keeper.StateDBPrepareArgs, reply *keeper.StateDBPrepareReply) error {
	StateDBPrepare(context.Context, *StateDBPrepareRequest) (*StateDBPrepareResponse, error)
	// func (s *SgxRpcServer) StateDBGetRefund(args *keeper.StateDBGetRefundArgs, reply *keeper.StateDBGetRefundReply) error {
	StateDBGetRefund(context.Context, *StateDBGetRefundRequest) (*StateDBGetRefundResponse, error)
	// func (s *SgxRpcServer) StateDBGetLogs(args *keeper.StateDBGetLogsArgs, reply *keeper.StateDBGetLogsReply) error {
	StateDBGetLogs(context.Context, *StateDBGetLogsRequest) (*StateDBGetLogsResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) PrepareTx(ctx context.Context, req *PrepareTxRequest) (*PrepareTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTx not implemented")
}
func (*UnimplementedQueryServiceServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedQueryServiceServer) Call(ctx context.Context, req *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedQueryServiceServer) Commit(ctx context.Context, req *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBAddBalance(ctx context.Context, req *StateDBAddBalanceRequest) (*StateDBAddBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBAddBalance not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBSubBalance(ctx context.Context, req *StateDBSubBalanceRequest) (*StateDBSubBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBSubBalance not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBSetNonce(ctx context.Context, req *StateDBSetNonceRequest) (*StateDBSetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBSetNonce not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBIncreaseNonce(ctx context.Context, req *StateDBIncreaseNonceRequest) (*StateDBIncreaseNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBIncreaseNonce not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBPrepare(ctx context.Context, req *StateDBPrepareRequest) (*StateDBPrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBPrepare not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBGetRefund(ctx context.Context, req *StateDBGetRefundRequest) (*StateDBGetRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBGetRefund not implemented")
}
func (*UnimplementedQueryServiceServer) StateDBGetLogs(ctx context.Context, req *StateDBGetLogsRequest) (*StateDBGetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDBGetLogs not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_PrepareTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PrepareTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/PrepareTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PrepareTx(ctx, req.(*PrepareTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBAddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBAddBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBAddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBAddBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBAddBalance(ctx, req.(*StateDBAddBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBSubBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBSubBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBSubBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBSubBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBSubBalance(ctx, req.(*StateDBSubBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBSetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBSetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBSetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBSetNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBSetNonce(ctx, req.(*StateDBSetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBIncreaseNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBIncreaseNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBIncreaseNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBIncreaseNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBIncreaseNonce(ctx, req.(*StateDBIncreaseNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBPrepare(ctx, req.(*StateDBPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBGetRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBGetRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBGetRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBGetRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBGetRefund(ctx, req.(*StateDBGetRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StateDBGetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDBGetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).StateDBGetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.sgx.v1.QueryService/StateDBGetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).StateDBGetLogs(ctx, req.(*StateDBGetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethermint.sgx.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareTx",
			Handler:    _QueryService_PrepareTx_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _QueryService_Create_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _QueryService_Call_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _QueryService_Commit_Handler,
		},
		{
			MethodName: "StateDBAddBalance",
			Handler:    _QueryService_StateDBAddBalance_Handler,
		},
		{
			MethodName: "StateDBSubBalance",
			Handler:    _QueryService_StateDBSubBalance_Handler,
		},
		{
			MethodName: "StateDBSetNonce",
			Handler:    _QueryService_StateDBSetNonce_Handler,
		},
		{
			MethodName: "StateDBIncreaseNonce",
			Handler:    _QueryService_StateDBIncreaseNonce_Handler,
		},
		{
			MethodName: "StateDBPrepare",
			Handler:    _QueryService_StateDBPrepare_Handler,
		},
		{
			MethodName: "StateDBGetRefund",
			Handler:    _QueryService_StateDBGetRefund_Handler,
		},
		{
			MethodName: "StateDBGetLogs",
			Handler:    _QueryService_StateDBGetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethermint/sgx/v1/query.proto",
}

func (m *PrepareTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EvmConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x28
	}
	if m.Gas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftOverGas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LeftOverGas))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ret) > 0 {
		i -= len(m.Ret)
		copy(dAtA[i:], m.Ret)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x30
	}
	if m.Gas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Gas))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftOverGas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LeftOverGas))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ret) > 0 {
		i -= len(m.Ret)
		copy(dAtA[i:], m.Ret)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBAddBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBAddBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBAddBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBAddBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBAddBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBAddBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBSubBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSubBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSubBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBSubBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSubBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSubBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBSetNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSetNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSetNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBSetNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBSetNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBSetNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBIncreaseNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBIncreaseNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBIncreaseNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBIncreaseNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBIncreaseNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBIncreaseNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVerkle {
		i--
		if m.IsVerkle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.IsPrague {
		i--
		if m.IsPrague {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.IsCancun {
		i--
		if m.IsCancun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.IsShanghai {
		i--
		if m.IsShanghai {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.IsMerge {
		i--
		if m.IsMerge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsLondon {
		i--
		if m.IsLondon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsBerlin {
		i--
		if m.IsBerlin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsIstanbul {
		i--
		if m.IsIstanbul {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsPetersburg {
		i--
		if m.IsPetersburg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsConstantinople {
		i--
		if m.IsConstantinople {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsByzantium {
		i--
		if m.IsByzantium {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsEIP158 {
		i--
		if m.IsEIP158 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsEIP155 {
		i--
		if m.IsEIP155 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsEIP150 {
		i--
		if m.IsEIP150 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsHomestead {
		i--
		if m.IsHomestead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccessTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageKeys) > 0 {
		for iNdEx := len(m.StorageKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StorageKeys[iNdEx])
			copy(dAtA[i:], m.StorageKeys[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.StorageKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateDBPrepareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBPrepareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBPrepareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccessList) > 0 {
		for iNdEx := len(m.AccessList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Rules) > 0 {
		i -= len(m.Rules)
		copy(dAtA[i:], m.Rules)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Rules)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Dest) > 0 {
		i -= len(m.Dest)
		copy(dAtA[i:], m.Dest)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Dest)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coinbase) > 0 {
		i -= len(m.Coinbase)
		copy(dAtA[i:], m.Coinbase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Coinbase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBPrepareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBPrepareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBPrepareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StateDBGetRefundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetRefundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetRefundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBGetRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Refund != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Refund))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBGetLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandlerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HandlerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateDBGetLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateDBGetLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateDBGetLogsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkipAccountChecks {
		i--
		if m.SkipAccountChecks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.BlobHashes) > 0 {
		for iNdEx := len(m.BlobHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlobHashes[iNdEx])
			copy(dAtA[i:], m.BlobHashes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.BlobHashes[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.BlobGasFeeCap != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlobGasFeeCap))
		i--
		dAtA[i] = 0x58
	}
	if len(m.AccessList) > 0 {
		for iNdEx := len(m.AccessList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x4a
	}
	if m.GasTipCap != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasTipCap))
		i--
		dAtA[i] = 0x40
	}
	if m.GasFeeCap != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasFeeCap))
		i--
		dAtA[i] = 0x38
	}
	if m.GasPrice != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.GasLimit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x20
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareTxEVMConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareTxEVMConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareTxEVMConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Overrides) > 0 {
		i -= len(m.Overrides)
		copy(dAtA[i:], m.Overrides)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Overrides)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ExtraEips) > 0 {
		dAtA4 := make([]byte, len(m.ExtraEips)*10)
		var j3 int
		for _, num1 := range m.ExtraEips {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EvmDenom) > 0 {
		i -= len(m.EvmDenom)
		copy(dAtA[i:], m.EvmDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NoBaseFee {
		i--
		if m.NoBaseFee {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DebugTrace {
		i--
		if m.DebugTrace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TxConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.BaseFee != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BaseFee))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoinBase) > 0 {
		i -= len(m.CoinBase)
		copy(dAtA[i:], m.CoinBase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CoinBase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainConfigJson) > 0 {
		i -= len(m.ChainConfigJson)
		copy(dAtA[i:], m.ChainConfigJson)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainConfigJson)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDevMode {
		i--
		if m.IsDevMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.Clique != nil {
		{
			size, err := m.Clique.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.Ethash != nil {
		{
			size, err := m.Ethash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.TerminalTotalDifficultyPassed {
		i--
		if m.TerminalTotalDifficultyPassed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.TerminalTotalDifficulty != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TerminalTotalDifficulty))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.VerkleTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VerkleTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.PragueTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PragueTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CancunTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CancunTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ShanghaiTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ShanghaiTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MergeNetsplitBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MergeNetsplitBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.GrayGlacierBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GrayGlacierBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ArrowGlacierBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ArrowGlacierBlock))
		i--
		dAtA[i] = 0x78
	}
	if m.LondonBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LondonBlock))
		i--
		dAtA[i] = 0x70
	}
	if m.BerlinBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BerlinBlock))
		i--
		dAtA[i] = 0x68
	}
	if m.MuirGlacierBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MuirGlacierBlock))
		i--
		dAtA[i] = 0x60
	}
	if m.IstanbulBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.IstanbulBlock))
		i--
		dAtA[i] = 0x58
	}
	if m.PetersburgBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PetersburgBlock))
		i--
		dAtA[i] = 0x50
	}
	if m.ConstantinopleBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConstantinopleBlock))
		i--
		dAtA[i] = 0x48
	}
	if m.ByzantiumBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ByzantiumBlock))
		i--
		dAtA[i] = 0x40
	}
	if m.EIP158Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EIP158Block))
		i--
		dAtA[i] = 0x38
	}
	if m.EIP155Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EIP155Block))
		i--
		dAtA[i] = 0x30
	}
	if m.EIP_150Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EIP_150Block))
		i--
		dAtA[i] = 0x28
	}
	if m.DAOForkSupport {
		i--
		if m.DAOForkSupport {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DAOForkBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DAOForkBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.HomesteadBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HomesteadBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EthashConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthashConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthashConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CliqueConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CliqueConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CliqueConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.TxIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EthLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TxIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrepareTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Header.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.EvmConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *PrepareTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Gas != 0 {
		n += 1 + sovQuery(uint64(m.Gas))
	}
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ret)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LeftOverGas != 0 {
		n += 1 + sovQuery(uint64(m.LeftOverGas))
	}
	return n
}

func (m *CallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Gas != 0 {
		n += 1 + sovQuery(uint64(m.Gas))
	}
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	return n
}

func (m *CallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ret)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LeftOverGas != 0 {
		n += 1 + sovQuery(uint64(m.LeftOverGas))
	}
	return n
}

func (m *CommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	return n
}

func (m *CommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBAddBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *StateDBAddBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBSubBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *StateDBSubBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBSetNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *StateDBSetNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBIncreaseNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StateDBIncreaseNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.IsHomestead {
		n += 2
	}
	if m.IsEIP150 {
		n += 2
	}
	if m.IsEIP155 {
		n += 2
	}
	if m.IsEIP158 {
		n += 2
	}
	if m.IsByzantium {
		n += 2
	}
	if m.IsConstantinople {
		n += 2
	}
	if m.IsPetersburg {
		n += 2
	}
	if m.IsIstanbul {
		n += 2
	}
	if m.IsBerlin {
		n += 2
	}
	if m.IsLondon {
		n += 2
	}
	if m.IsMerge {
		n += 2
	}
	if m.IsShanghai {
		n += 2
	}
	if m.IsCancun {
		n += 2
	}
	if m.IsPrague {
		n += 2
	}
	if m.IsVerkle {
		n += 3
	}
	return n
}

func (m *AccessTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.StorageKeys) > 0 {
		for _, b := range m.StorageKeys {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StateDBPrepareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Coinbase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Dest)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Rules)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.AccessList) > 0 {
		for _, e := range m.AccessList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StateDBPrepareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StateDBGetRefundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	return n
}

func (m *StateDBGetRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refund != 0 {
		n += 1 + sovQuery(uint64(m.Refund))
	}
	return n
}

func (m *StateDBGetLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerId != 0 {
		n += 1 + sovQuery(uint64(m.HandlerId))
	}
	return n
}

func (m *StateDBGetLogsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	if m.GasLimit != 0 {
		n += 1 + sovQuery(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovQuery(uint64(m.GasPrice))
	}
	if m.GasFeeCap != 0 {
		n += 1 + sovQuery(uint64(m.GasFeeCap))
	}
	if m.GasTipCap != 0 {
		n += 1 + sovQuery(uint64(m.GasTipCap))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.AccessList) > 0 {
		for _, e := range m.AccessList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.BlobGasFeeCap != 0 {
		n += 1 + sovQuery(uint64(m.BlobGasFeeCap))
	}
	if len(m.BlobHashes) > 0 {
		for _, b := range m.BlobHashes {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.SkipAccountChecks {
		n += 2
	}
	return n
}

func (m *PrepareTxEVMConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainConfigJson)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CoinBase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BaseFee != 0 {
		n += 1 + sovQuery(uint64(m.BaseFee))
	}
	l = m.TxConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.DebugTrace {
		n += 2
	}
	if m.NoBaseFee {
		n += 2
	}
	l = len(m.EvmDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.ExtraEips) > 0 {
		l = 0
		for _, e := range m.ExtraEips {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	l = len(m.Overrides)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != 0 {
		n += 1 + sovQuery(uint64(m.ChainID))
	}
	if m.HomesteadBlock != 0 {
		n += 1 + sovQuery(uint64(m.HomesteadBlock))
	}
	if m.DAOForkBlock != 0 {
		n += 1 + sovQuery(uint64(m.DAOForkBlock))
	}
	if m.DAOForkSupport {
		n += 2
	}
	if m.EIP_150Block != 0 {
		n += 1 + sovQuery(uint64(m.EIP_150Block))
	}
	if m.EIP155Block != 0 {
		n += 1 + sovQuery(uint64(m.EIP155Block))
	}
	if m.EIP158Block != 0 {
		n += 1 + sovQuery(uint64(m.EIP158Block))
	}
	if m.ByzantiumBlock != 0 {
		n += 1 + sovQuery(uint64(m.ByzantiumBlock))
	}
	if m.ConstantinopleBlock != 0 {
		n += 1 + sovQuery(uint64(m.ConstantinopleBlock))
	}
	if m.PetersburgBlock != 0 {
		n += 1 + sovQuery(uint64(m.PetersburgBlock))
	}
	if m.IstanbulBlock != 0 {
		n += 1 + sovQuery(uint64(m.IstanbulBlock))
	}
	if m.MuirGlacierBlock != 0 {
		n += 1 + sovQuery(uint64(m.MuirGlacierBlock))
	}
	if m.BerlinBlock != 0 {
		n += 1 + sovQuery(uint64(m.BerlinBlock))
	}
	if m.LondonBlock != 0 {
		n += 1 + sovQuery(uint64(m.LondonBlock))
	}
	if m.ArrowGlacierBlock != 0 {
		n += 1 + sovQuery(uint64(m.ArrowGlacierBlock))
	}
	if m.GrayGlacierBlock != 0 {
		n += 2 + sovQuery(uint64(m.GrayGlacierBlock))
	}
	if m.MergeNetsplitBlock != 0 {
		n += 2 + sovQuery(uint64(m.MergeNetsplitBlock))
	}
	if m.ShanghaiTime != 0 {
		n += 2 + sovQuery(uint64(m.ShanghaiTime))
	}
	if m.CancunTime != 0 {
		n += 2 + sovQuery(uint64(m.CancunTime))
	}
	if m.PragueTime != 0 {
		n += 2 + sovQuery(uint64(m.PragueTime))
	}
	if m.VerkleTime != 0 {
		n += 2 + sovQuery(uint64(m.VerkleTime))
	}
	if m.TerminalTotalDifficulty != 0 {
		n += 2 + sovQuery(uint64(m.TerminalTotalDifficulty))
	}
	if m.TerminalTotalDifficultyPassed {
		n += 3
	}
	if m.Ethash != nil {
		l = m.Ethash.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.Clique != nil {
		l = m.Clique.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	if m.IsDevMode {
		n += 3
	}
	return n
}

func (m *EthashConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CliqueConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *TxConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovQuery(uint64(m.TxIndex))
	}
	if m.LogIndex != 0 {
		n += 1 + sovQuery(uint64(m.LogIndex))
	}
	return n
}

func (m *EthLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, b := range m.Topics {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovQuery(uint64(m.TxIndex))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	if m.Removed {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrepareTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EvmConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = append(m.Ret[:0], dAtA[iNdEx:postIndex]...)
			if m.Ret == nil {
				m.Ret = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = append(m.ContractAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAddr == nil {
				m.ContractAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftOverGas", wireType)
			}
			m.LeftOverGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftOverGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			m.Gas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = append(m.Ret[:0], dAtA[iNdEx:postIndex]...)
			if m.Ret == nil {
				m.Ret = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftOverGas", wireType)
			}
			m.LeftOverGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftOverGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBAddBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBAddBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBAddBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBAddBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBAddBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBAddBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSubBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSubBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSubBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSubBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSubBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSubBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSetNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSetNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSetNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBSetNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBSetNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBSetNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBIncreaseNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBIncreaseNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBIncreaseNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = append(m.Caller[:0], dAtA[iNdEx:postIndex]...)
			if m.Caller == nil {
				m.Caller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBIncreaseNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBIncreaseNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBIncreaseNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHomestead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHomestead = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEIP150", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEIP150 = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEIP155", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEIP155 = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEIP158", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEIP158 = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsByzantium", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsByzantium = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConstantinople", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConstantinople = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPetersburg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPetersburg = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIstanbul", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIstanbul = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBerlin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBerlin = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLondon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLondon = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMerge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMerge = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShanghai", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShanghai = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCancun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCancun = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrague", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrague = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerkle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerkle = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageKeys = append(m.StorageKeys, make([]byte, postIndex-iNdEx))
			copy(m.StorageKeys[len(m.StorageKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBPrepareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBPrepareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBPrepareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coinbase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coinbase = append(m.Coinbase[:0], dAtA[iNdEx:postIndex]...)
			if m.Coinbase == nil {
				m.Coinbase = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dest = append(m.Dest[:0], dAtA[iNdEx:postIndex]...)
			if m.Dest == nil {
				m.Dest = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules[:0], dAtA[iNdEx:postIndex]...)
			if m.Rules == nil {
				m.Rules = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessList = append(m.AccessList, &AccessTuple{})
			if err := m.AccessList[len(m.AccessList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBPrepareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBPrepareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBPrepareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetRefundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetRefundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetRefundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			m.Refund = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refund |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerId", wireType)
			}
			m.HandlerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandlerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateDBGetLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateDBGetLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateDBGetLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &EthLog{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasFeeCap", wireType)
			}
			m.GasFeeCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasFeeCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTipCap", wireType)
			}
			m.GasTipCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTipCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessList = append(m.AccessList, AccessTuple{})
			if err := m.AccessList[len(m.AccessList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobGasFeeCap", wireType)
			}
			m.BlobGasFeeCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobGasFeeCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlobHashes = append(m.BlobHashes, make([]byte, postIndex-iNdEx))
			copy(m.BlobHashes[len(m.BlobHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipAccountChecks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipAccountChecks = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareTxEVMConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareTxEVMConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareTxEVMConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfigJson", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainConfigJson = append(m.ChainConfigJson[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainConfigJson == nil {
				m.ChainConfigJson = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinBase = append(m.CoinBase[:0], dAtA[iNdEx:postIndex]...)
			if m.CoinBase == nil {
				m.CoinBase = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			m.BaseFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugTrace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DebugTrace = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBaseFee", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoBaseFee = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtraEips = append(m.ExtraEips, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtraEips) == 0 {
					m.ExtraEips = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtraEips = append(m.ExtraEips, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraEips", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overrides", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Overrides = append(m.Overrides[:0], dAtA[iNdEx:postIndex]...)
			if m.Overrides == nil {
				m.Overrides = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomesteadBlock", wireType)
			}
			m.HomesteadBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomesteadBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DAOForkBlock", wireType)
			}
			m.DAOForkBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DAOForkBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DAOForkSupport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DAOForkSupport = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP_150Block", wireType)
			}
			m.EIP_150Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EIP_150Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP155Block", wireType)
			}
			m.EIP155Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EIP155Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP158Block", wireType)
			}
			m.EIP158Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EIP158Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByzantiumBlock", wireType)
			}
			m.ByzantiumBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByzantiumBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstantinopleBlock", wireType)
			}
			m.ConstantinopleBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstantinopleBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetersburgBlock", wireType)
			}
			m.PetersburgBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetersburgBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstanbulBlock", wireType)
			}
			m.IstanbulBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IstanbulBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuirGlacierBlock", wireType)
			}
			m.MuirGlacierBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuirGlacierBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BerlinBlock", wireType)
			}
			m.BerlinBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BerlinBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LondonBlock", wireType)
			}
			m.LondonBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LondonBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrowGlacierBlock", wireType)
			}
			m.ArrowGlacierBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArrowGlacierBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrayGlacierBlock", wireType)
			}
			m.GrayGlacierBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrayGlacierBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeNetsplitBlock", wireType)
			}
			m.MergeNetsplitBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MergeNetsplitBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShanghaiTime", wireType)
			}
			m.ShanghaiTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShanghaiTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancunTime", wireType)
			}
			m.CancunTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancunTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PragueTime", wireType)
			}
			m.PragueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PragueTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerkleTime", wireType)
			}
			m.VerkleTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerkleTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalTotalDifficulty", wireType)
			}
			m.TerminalTotalDifficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TerminalTotalDifficulty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalTotalDifficultyPassed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TerminalTotalDifficultyPassed = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ethash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ethash == nil {
				m.Ethash = &EthashConfig{}
			}
			if err := m.Ethash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clique == nil {
				m.Clique = &CliqueConfig{}
			}
			if err := m.Clique.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDevMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDevMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthashConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthashConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthashConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CliqueConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CliqueConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CliqueConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, make([]byte, postIndex-iNdEx))
			copy(m.Topics[len(m.Topics)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
